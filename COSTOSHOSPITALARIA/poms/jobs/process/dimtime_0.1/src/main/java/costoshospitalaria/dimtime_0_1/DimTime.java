// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package costoshospitalaria.dimtime_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.variables;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.rutinas;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: DimTime Purpose: DimTime<br>
 * Description: Llenar la tabla de dimensi√≥n tiempo <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class DimTime implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "DimTime";
	private final String projectName = "COSTOSHOSPITALARIA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					DimTime.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(DimTime.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBClose_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMsgBox_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMsgBox_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRowGenerator_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputExcel_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError2", 0, "error");
			}

			errorCode = null;
			tDBRollback_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			if (this.execStat) {
				runStat.updateStatOnConnection("OnComponentError3", 0, "error");
			}

			errorCode = null;
			tDBRollback_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (Exception e) {
			e.printStackTrace();
		}

		tRowGenerator_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBCommit_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBCommit_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBRollback_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBRollback_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBClose_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMsgBox_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRowGenerator_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBCommit_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBRollback_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBClose_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_1 begin ] start
				 */

				ok_Hash.put("tDBClose_1", false);
				start_Hash.put("tDBClose_1", System.currentTimeMillis());

				currentComponent = "tDBClose_1";

				int tos_count_tDBClose_1 = 0;

				/**
				 * [tDBClose_1 begin ] stop
				 */

				/**
				 * [tDBClose_1 main ] start
				 */

				currentComponent = "tDBClose_1";

				java.sql.Connection conn_tDBClose_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed()) {

					conn_tDBClose_1.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

				}

				tos_count_tDBClose_1++;

				/**
				 * [tDBClose_1 main ] stop
				 */

				/**
				 * [tDBClose_1 process_data_begin ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_1 process_data_end ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 process_data_end ] stop
				 */

				/**
				 * [tDBClose_1 end ] start
				 */

				currentComponent = "tDBClose_1";

				ok_Hash.put("tDBClose_1", true);
				end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBClose_2Process(globalMap);

				/**
				 * [tDBClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_1 finally ] start
				 */

				currentComponent = "tDBClose_1";

				/**
				 * [tDBClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}

	public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBClose_2 begin ] start
				 */

				ok_Hash.put("tDBClose_2", false);
				start_Hash.put("tDBClose_2", System.currentTimeMillis());

				currentComponent = "tDBClose_2";

				int tos_count_tDBClose_2 = 0;

				/**
				 * [tDBClose_2 begin ] stop
				 */

				/**
				 * [tDBClose_2 main ] start
				 */

				currentComponent = "tDBClose_2";

				java.sql.Connection conn_tDBClose_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				if (conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed()) {

					conn_tDBClose_2.close();

					if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_2"))
							&& routines.system.BundleUtils.inOSGi()) {
						Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").getMethod("checkedShutdown")
								.invoke(null, (Object[]) null);
					}

				}

				tos_count_tDBClose_2++;

				/**
				 * [tDBClose_2 main ] stop
				 */

				/**
				 * [tDBClose_2 process_data_begin ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_begin ] stop
				 */

				/**
				 * [tDBClose_2 process_data_end ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 process_data_end ] stop
				 */

				/**
				 * [tDBClose_2 end ] start
				 */

				currentComponent = "tDBClose_2";

				ok_Hash.put("tDBClose_2", true);
				end_Hash.put("tDBClose_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tMsgBox_1Process(globalMap);

				/**
				 * [tDBClose_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBClose_2 finally ] start
				 */

				currentComponent = "tDBClose_2";

				/**
				 * [tDBClose_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_1 begin ] start
				 */

				ok_Hash.put("tMsgBox_1", false);
				start_Hash.put("tMsgBox_1", System.currentTimeMillis());

				currentComponent = "tMsgBox_1";

				int tos_count_tMsgBox_1 = 0;

				/**
				 * [tMsgBox_1 begin ] stop
				 */

				/**
				 * [tMsgBox_1 main ] start
				 */

				currentComponent = "tMsgBox_1";

				int messageIcontMsgBox_1 = javax.swing.JOptionPane.INFORMATION_MESSAGE;
				String titletMsgBox_1 = "Dim_Tiempo";
				String messagetMsgBox_1 = "Se ha creado el excel y se han ingresado todos los datos a la base de datos de forma correcta";
				String resulttMsgBox_1 = null;

				javax.swing.JOptionPane.showMessageDialog(null, messagetMsgBox_1, titletMsgBox_1, messageIcontMsgBox_1);
				resulttMsgBox_1 = String.valueOf(1);

				globalMap.put("tMsgBox_1_RESULT", resulttMsgBox_1);

				tos_count_tMsgBox_1++;

				/**
				 * [tMsgBox_1 main ] stop
				 */

				/**
				 * [tMsgBox_1 process_data_begin ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 process_data_begin ] stop
				 */

				/**
				 * [tMsgBox_1 process_data_end ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 process_data_end ] stop
				 */

				/**
				 * [tMsgBox_1 end ] start
				 */

				currentComponent = "tMsgBox_1";

				ok_Hash.put("tMsgBox_1", true);
				end_Hash.put("tMsgBox_1", System.currentTimeMillis());

				/**
				 * [tMsgBox_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_1 finally ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host="
						+ "localhost" + ")(port=" + "1521" + "))(connect_data=(service_name=" + "" + ")))";
				globalMap.put("connectionType_" + "tDBConnection_1", "ORACLE_SERVICE_NAME");
				String dbUser_tDBConnection_1 = "costos";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:PrALeRvzvFunrJCb8ecsof8gi3A6+TXI9yZfNPn0cD+dgQ==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}
				globalMap.put("host_" + "tDBConnection_1", "localhost");
				globalMap.put("port_" + "tDBConnection_1", "1521");
				globalMap.put("dbname_" + "tDBConnection_1", "");

				globalMap.put("dbschema_" + "tDBConnection_1", "");
				globalMap.put("username_" + "tDBConnection_1", "costos");
				globalMap.put("password_" + "tDBConnection_1", dbPwd_tDBConnection_1);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_2Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String properties_tDBConnection_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBConnection_2 == null || properties_tDBConnection_2.trim().length() == 0) {
					properties_tDBConnection_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBConnection_2.contains("rewriteBatchedStatements=")) {
						properties_tDBConnection_2 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBConnection_2.contains("allowLoadLocalInfile=")) {
						properties_tDBConnection_2 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBConnection_2 = "jdbc:mysql://" + "" + ":" + "3306" + "/" + "dim_time" + "?"
						+ properties_tDBConnection_2;
				String dbUser_tDBConnection_2 = "root";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:kwQ/ZVotkOP76n2lkcmYN9By/eR8JaqsksLkIA==");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.mysql.cj.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("db_tDBConnection_2", "dim_time");

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_DimTime = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[0];

		public Integer fecha_id;

		public Integer getFecha_id() {
			return this.fecha_id;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public Integer ano_id;

		public Integer getAno_id() {
			return this.ano_id;
		}

		public String mes;

		public String getMes() {
			return this.mes;
		}

		public Integer mes_id;

		public Integer getMes_id() {
			return this.mes_id;
		}

		public Integer dia_mes_id;

		public Integer getDia_mes_id() {
			return this.dia_mes_id;
		}

		public String dia_semana;

		public String getDia_semana() {
			return this.dia_semana;
		}

		public Integer dia_semana_id;

		public Integer getDia_semana_id() {
			return this.dia_semana_id;
		}

		public Integer dia_ano_id;

		public Integer getDia_ano_id() {
			return this.dia_ano_id;
		}

		public String semana_ano;

		public String getSemana_ano() {
			return this.semana_ano;
		}

		public String fin_de_semana;

		public String getFin_de_semana() {
			return this.fin_de_semana;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		public Integer semestre_id;

		public Integer getSemestre_id() {
			return this.semestre_id;
		}

		public String trimestre;

		public String getTrimestre() {
			return this.trimestre;
		}

		public Integer trimestre_id;

		public Integer getTrimestre_id() {
			return this.trimestre_id;
		}

		public String bisiesto;

		public String getBisiesto() {
			return this.bisiesto;
		}

		public String quincena;

		public String getQuincena() {
			return this.quincena;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fecha_id=" + String.valueOf(fecha_id));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",ano_id=" + String.valueOf(ano_id));
			sb.append(",mes=" + mes);
			sb.append(",mes_id=" + String.valueOf(mes_id));
			sb.append(",dia_mes_id=" + String.valueOf(dia_mes_id));
			sb.append(",dia_semana=" + dia_semana);
			sb.append(",dia_semana_id=" + String.valueOf(dia_semana_id));
			sb.append(",dia_ano_id=" + String.valueOf(dia_ano_id));
			sb.append(",semana_ano=" + semana_ano);
			sb.append(",fin_de_semana=" + fin_de_semana);
			sb.append(",semestre=" + semestre);
			sb.append(",semestre_id=" + String.valueOf(semestre_id));
			sb.append(",trimestre=" + trimestre);
			sb.append(",trimestre_id=" + String.valueOf(trimestre_id));
			sb.append(",bisiesto=" + bisiesto);
			sb.append(",quincena=" + quincena);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_DimTime = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[0];

		public Integer fecha_id;

		public Integer getFecha_id() {
			return this.fecha_id;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public Integer ano_id;

		public Integer getAno_id() {
			return this.ano_id;
		}

		public String mes;

		public String getMes() {
			return this.mes;
		}

		public Integer mes_id;

		public Integer getMes_id() {
			return this.mes_id;
		}

		public Integer dia_mes_id;

		public Integer getDia_mes_id() {
			return this.dia_mes_id;
		}

		public String dia_semana;

		public String getDia_semana() {
			return this.dia_semana;
		}

		public Integer dia_semana_id;

		public Integer getDia_semana_id() {
			return this.dia_semana_id;
		}

		public Integer dia_ano_id;

		public Integer getDia_ano_id() {
			return this.dia_ano_id;
		}

		public String semana_ano;

		public String getSemana_ano() {
			return this.semana_ano;
		}

		public String fin_de_semana;

		public String getFin_de_semana() {
			return this.fin_de_semana;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		public Integer semestre_id;

		public Integer getSemestre_id() {
			return this.semestre_id;
		}

		public String trimestre;

		public String getTrimestre() {
			return this.trimestre;
		}

		public Integer trimestre_id;

		public Integer getTrimestre_id() {
			return this.trimestre_id;
		}

		public String bisiesto;

		public String getBisiesto() {
			return this.bisiesto;
		}

		public String quincena;

		public String getQuincena() {
			return this.quincena;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fecha_id=" + String.valueOf(fecha_id));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",ano_id=" + String.valueOf(ano_id));
			sb.append(",mes=" + mes);
			sb.append(",mes_id=" + String.valueOf(mes_id));
			sb.append(",dia_mes_id=" + String.valueOf(dia_mes_id));
			sb.append(",dia_semana=" + dia_semana);
			sb.append(",dia_semana_id=" + String.valueOf(dia_semana_id));
			sb.append(",dia_ano_id=" + String.valueOf(dia_ano_id));
			sb.append(",semana_ano=" + semana_ano);
			sb.append(",fin_de_semana=" + fin_de_semana);
			sb.append(",semestre=" + semestre);
			sb.append(",semestre_id=" + String.valueOf(semestre_id));
			sb.append(",trimestre=" + trimestre);
			sb.append(",trimestre_id=" + String.valueOf(trimestre_id));
			sb.append(",bisiesto=" + bisiesto);
			sb.append(",quincena=" + quincena);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class SalidaFechasStruct implements routines.system.IPersistableRow<SalidaFechasStruct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_DimTime = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[0];

		public Integer fecha_id;

		public Integer getFecha_id() {
			return this.fecha_id;
		}

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		public Integer ano_id;

		public Integer getAno_id() {
			return this.ano_id;
		}

		public String mes;

		public String getMes() {
			return this.mes;
		}

		public Integer mes_id;

		public Integer getMes_id() {
			return this.mes_id;
		}

		public Integer dia_mes_id;

		public Integer getDia_mes_id() {
			return this.dia_mes_id;
		}

		public String dia_semana;

		public String getDia_semana() {
			return this.dia_semana;
		}

		public Integer dia_semana_id;

		public Integer getDia_semana_id() {
			return this.dia_semana_id;
		}

		public Integer dia_ano_id;

		public Integer getDia_ano_id() {
			return this.dia_ano_id;
		}

		public String semana_ano;

		public String getSemana_ano() {
			return this.semana_ano;
		}

		public String fin_de_semana;

		public String getFin_de_semana() {
			return this.fin_de_semana;
		}

		public String semestre;

		public String getSemestre() {
			return this.semestre;
		}

		public Integer semestre_id;

		public Integer getSemestre_id() {
			return this.semestre_id;
		}

		public String trimestre;

		public String getTrimestre() {
			return this.trimestre;
		}

		public Integer trimestre_id;

		public Integer getTrimestre_id() {
			return this.trimestre_id;
		}

		public String bisiesto;

		public String getBisiesto() {
			return this.bisiesto;
		}

		public String quincena;

		public String getQuincena() {
			return this.quincena;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_DimTime.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_DimTime.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_DimTime, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha_id = readInteger(dis);

					this.fecha = readDate(dis);

					this.ano_id = readInteger(dis);

					this.mes = readString(dis);

					this.mes_id = readInteger(dis);

					this.dia_mes_id = readInteger(dis);

					this.dia_semana = readString(dis);

					this.dia_semana_id = readInteger(dis);

					this.dia_ano_id = readInteger(dis);

					this.semana_ano = readString(dis);

					this.fin_de_semana = readString(dis);

					this.semestre = readString(dis);

					this.semestre_id = readInteger(dis);

					this.trimestre = readString(dis);

					this.trimestre_id = readInteger(dis);

					this.bisiesto = readString(dis);

					this.quincena = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.fecha_id, dos);

				// java.util.Date

				writeDate(this.fecha, dos);

				// Integer

				writeInteger(this.ano_id, dos);

				// String

				writeString(this.mes, dos);

				// Integer

				writeInteger(this.mes_id, dos);

				// Integer

				writeInteger(this.dia_mes_id, dos);

				// String

				writeString(this.dia_semana, dos);

				// Integer

				writeInteger(this.dia_semana_id, dos);

				// Integer

				writeInteger(this.dia_ano_id, dos);

				// String

				writeString(this.semana_ano, dos);

				// String

				writeString(this.fin_de_semana, dos);

				// String

				writeString(this.semestre, dos);

				// Integer

				writeInteger(this.semestre_id, dos);

				// String

				writeString(this.trimestre, dos);

				// Integer

				writeInteger(this.trimestre_id, dos);

				// String

				writeString(this.bisiesto, dos);

				// String

				writeString(this.quincena, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fecha_id=" + String.valueOf(fecha_id));
			sb.append(",fecha=" + String.valueOf(fecha));
			sb.append(",ano_id=" + String.valueOf(ano_id));
			sb.append(",mes=" + mes);
			sb.append(",mes_id=" + String.valueOf(mes_id));
			sb.append(",dia_mes_id=" + String.valueOf(dia_mes_id));
			sb.append(",dia_semana=" + dia_semana);
			sb.append(",dia_semana_id=" + String.valueOf(dia_semana_id));
			sb.append(",dia_ano_id=" + String.valueOf(dia_ano_id));
			sb.append(",semana_ano=" + semana_ano);
			sb.append(",fin_de_semana=" + fin_de_semana);
			sb.append(",semestre=" + semestre);
			sb.append(",semestre_id=" + String.valueOf(semestre_id));
			sb.append(",trimestre=" + trimestre);
			sb.append(",trimestre_id=" + String.valueOf(trimestre_id));
			sb.append(",bisiesto=" + bisiesto);
			sb.append(",quincena=" + quincena);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(SalidaFechasStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class DateAutoGenerateStruct implements routines.system.IPersistableRow<DateAutoGenerateStruct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_DimTime = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_DimTime = new byte[0];

		public java.util.Date fecha;

		public java.util.Date getFecha() {
			return this.fecha;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_DimTime) {

				try {

					int length = 0;

					this.fecha = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.fecha, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("fecha=" + String.valueOf(fecha));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(DateAutoGenerateStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tRowGenerator_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				DateAutoGenerateStruct DateAutoGenerate = new DateAutoGenerateStruct();
				SalidaFechasStruct SalidaFechas = new SalidaFechasStruct();
				SalidaFechasStruct row1 = SalidaFechas;
				SalidaFechasStruct row2 = SalidaFechas;

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int tmp_batchUpdateCount_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rowsToCommitCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;

				boolean whetherReject_tDBOutput_1 = false;

				java.sql.Connection conn_tDBOutput_1 = null;

				// optional table
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				String driverClass_tDBOutput_1 = "oracle.jdbc.OracleDriver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String url_tDBOutput_1 = null;
				url_tDBOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "" + ")))";
				String dbUser_tDBOutput_1 = "costos";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:5pZF6UKv7iBXO+anoeqCbgihoMcUXXChWiy/vlZKfByRoQ==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				dbschema_tDBOutput_1 = "";

				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);
				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);
				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;
				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;
				int count_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = ("DimTiempo");
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "." + ("DimTiempo");
				}
				String tableNameForSearch_tDBOutput_1 = "" + ((String) "DimTiempo") + "";
				String dbschemaForSearch_tDBOutput_1 = null;
				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					dbschemaForSearch_tDBOutput_1 = ((String) "costos").toUpperCase();
				} else {
					dbschemaForSearch_tDBOutput_1 = dbschema_tDBOutput_1.toUpperCase();
				}

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_1 = conn_tDBOutput_1.getMetaData();
				if (tableNameForSearch_tDBOutput_1.indexOf("\"") == -1) {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.toUpperCase();
				} else {
					tableNameForSearch_tDBOutput_1 = tableNameForSearch_tDBOutput_1.replaceAll("\"", "");
				}
				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.ResultSet rsTable_tDBOutput_1 = dbMetaData_tDBOutput_1.getTables(null,
						dbschemaForSearch_tDBOutput_1, tableNameForSearch_tDBOutput_1, new String[] { "TABLE" })) {
					if (rsTable_tDBOutput_1.next()) {
						whetherExist_tDBOutput_1 = true;
					}
				}

				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE " + tableName_tDBOutput_1 + "");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE " + tableName_tDBOutput_1
							+ "(fecha_id INT ,fecha DATE ,ano_id INT ,mes VARCHAR2(10)  ,mes_id INT ,dia_mes_id INT ,dia_semana VARCHAR2(10)  ,dia_semana_id INT ,dia_ano_id INT ,semana_ano VARCHAR2(7)  ,fin_de_semana VARCHAR2(2)  ,semestre VARCHAR2(10)  ,semestre_id INT ,trimestre VARCHAR2(11)  ,trimestre_id INT ,bisiesto VARCHAR2(11)  ,quincena VARCHAR2(8)  )");
				}
				String insert_tDBOutput_1 = "INSERT INTO " + tableName_tDBOutput_1
						+ " (fecha_id,fecha,ano_id,mes,mes_id,dia_mes_id,dia_semana,dia_semana_id,dia_ano_id,semana_ano,fin_de_semana,semestre,semestre_id,trimestre,trimestre_id,bisiesto,quincena) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";

				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tDBOutput_2 begin ] start
				 */

				ok_Hash.put("tDBOutput_2", false);
				start_Hash.put("tDBOutput_2", System.currentTimeMillis());

				currentComponent = "tDBOutput_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tDBOutput_2 = 0;

				int nb_line_tDBOutput_2 = 0;
				int nb_line_update_tDBOutput_2 = 0;
				int nb_line_inserted_tDBOutput_2 = 0;
				int nb_line_deleted_tDBOutput_2 = 0;
				int nb_line_rejected_tDBOutput_2 = 0;

				int deletedCount_tDBOutput_2 = 0;
				int updatedCount_tDBOutput_2 = 0;
				int insertedCount_tDBOutput_2 = 0;
				int rowsToCommitCount_tDBOutput_2 = 0;
				int rejectedCount_tDBOutput_2 = 0;

				String tableName_tDBOutput_2 = "DimTiempo";
				boolean whetherReject_tDBOutput_2 = false;

				java.util.Calendar calendar_tDBOutput_2 = java.util.Calendar.getInstance();
				calendar_tDBOutput_2.set(1, 0, 1, 0, 0, 0);
				long year1_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				calendar_tDBOutput_2.set(10000, 0, 1, 0, 0, 0);
				long year10000_tDBOutput_2 = calendar_tDBOutput_2.getTime().getTime();
				long date_tDBOutput_2;

				java.sql.Connection conn_tDBOutput_2 = null;

				String properties_tDBOutput_2 = "noDatetimeStringSync=true&enabledTLSProtocols=TLSv1.2,TLSv1.1,TLSv1";
				if (properties_tDBOutput_2 == null || properties_tDBOutput_2.trim().length() == 0) {
					properties_tDBOutput_2 = "rewriteBatchedStatements=true&allowLoadLocalInfile=true";
				} else {
					if (!properties_tDBOutput_2.contains("rewriteBatchedStatements=")) {
						properties_tDBOutput_2 += "&rewriteBatchedStatements=true";
					}

					if (!properties_tDBOutput_2.contains("allowLoadLocalInfile=")) {
						properties_tDBOutput_2 += "&allowLoadLocalInfile=true";
					}
				}

				String url_tDBOutput_2 = "jdbc:mysql://" + "" + ":" + "3306" + "/" + "dim_time" + "?"
						+ properties_tDBOutput_2;

				String driverClass_tDBOutput_2 = "com.mysql.cj.jdbc.Driver";

				String dbUser_tDBOutput_2 = "root";

				final String decryptedPassword_tDBOutput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:jwCeJ9vKw46hUL6ySMKu93rC/sXJQGM7DG4uRw==");

				String dbPwd_tDBOutput_2 = decryptedPassword_tDBOutput_2;
				java.lang.Class.forName(driverClass_tDBOutput_2);

				conn_tDBOutput_2 = java.sql.DriverManager.getConnection(url_tDBOutput_2, dbUser_tDBOutput_2,
						dbPwd_tDBOutput_2);

				resourceMap.put("conn_tDBOutput_2", conn_tDBOutput_2);
				conn_tDBOutput_2.setAutoCommit(false);
				int commitEvery_tDBOutput_2 = 10000;
				int commitCounter_tDBOutput_2 = 0;

				int count_tDBOutput_2 = 0;

				java.sql.DatabaseMetaData dbMetaData_tDBOutput_2 = conn_tDBOutput_2.getMetaData();
				java.sql.ResultSet rsTable_tDBOutput_2 = dbMetaData_tDBOutput_2.getTables("dim_time", null, null,
						new String[] { "TABLE" });
				boolean whetherExist_tDBOutput_2 = false;
				while (rsTable_tDBOutput_2.next()) {
					String table_tDBOutput_2 = rsTable_tDBOutput_2.getString("TABLE_NAME");
					if (table_tDBOutput_2.equalsIgnoreCase("DimTiempo")) {
						whetherExist_tDBOutput_2 = true;
						break;
					}
				}
				if (whetherExist_tDBOutput_2) {
					try (java.sql.Statement stmtDrop_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
						stmtDrop_tDBOutput_2.execute("DROP TABLE `" + tableName_tDBOutput_2 + "`");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_2 = conn_tDBOutput_2.createStatement()) {
					stmtCreate_tDBOutput_2.execute("CREATE TABLE `" + tableName_tDBOutput_2
							+ "`(`fecha_id` INT(8)  ,`fecha` DATETIME ,`ano_id` INT(4)  ,`mes` VARCHAR(10)  ,`mes_id` INT(2)  ,`dia_mes_id` INT(2)  ,`dia_semana` VARCHAR(10)  ,`dia_semana_id` INT(2)  ,`dia_ano_id` INT(3)  ,`semana_ano` VARCHAR(7)  ,`fin_de_semana` VARCHAR(2)  ,`semestre` VARCHAR(10)  ,`semestre_id` INT(1)  ,`trimestre` VARCHAR(11)  ,`trimestre_id` INT(1)  ,`bisiesto` VARCHAR(11)  ,`quincena` VARCHAR(8)  )");
				}

				String insert_tDBOutput_2 = "INSERT INTO `" + "DimTiempo"
						+ "` (`fecha_id`,`fecha`,`ano_id`,`mes`,`mes_id`,`dia_mes_id`,`dia_semana`,`dia_semana_id`,`dia_ano_id`,`semana_ano`,`fin_de_semana`,`semestre`,`semestre_id`,`trimestre`,`trimestre_id`,`bisiesto`,`quincena`) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";
				int batchSize_tDBOutput_2 = 100;
				int batchSizeCounter_tDBOutput_2 = 0;

				java.sql.PreparedStatement pstmt_tDBOutput_2 = conn_tDBOutput_2.prepareStatement(insert_tDBOutput_2);
				resourceMap.put("pstmt_tDBOutput_2", pstmt_tDBOutput_2);

				/**
				 * [tDBOutput_2 begin ] stop
				 */

				/**
				 * [tFileOutputExcel_1 begin ] start
				 */

				ok_Hash.put("tFileOutputExcel_1", false);
				start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				currentComponent = "tFileOutputExcel_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "SalidaFechas");
				}

				int tos_count_tFileOutputExcel_1 = 0;

				int columnIndex_tFileOutputExcel_1 = 0;
				boolean headerIsInserted_tFileOutputExcel_1 = false;

				String fileName_tFileOutputExcel_1 = "D:/Documentos/2022/Documentos/2022-1 Universidad/5. Base de datos avanzada/ProyectoFinal/Dim_Tiempo.xls";
				int nb_line_tFileOutputExcel_1 = 0;
				org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();

				xlsxTool_tFileOutputExcel_1.setTruncateExceedingCharacters(false);
				xlsxTool_tFileOutputExcel_1.setSheet("DimTiempo");
				xlsxTool_tFileOutputExcel_1.setAppend(false, false, false);
				xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
				xlsxTool_tFileOutputExcel_1.setXY(false, 0, 0, false);

				java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap
						.get("concurrentHashMap");
				java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1
						.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
				synchronized (lockObj_tFileOutputExcel_1) {

					xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);

				}

				xlsxTool_tFileOutputExcel_1.setFont("");

				if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0) {

					xlsxTool_tFileOutputExcel_1.addRow();

					xlsxTool_tFileOutputExcel_1.addCellValue("fecha_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("fecha");

					xlsxTool_tFileOutputExcel_1.addCellValue("ano_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("mes");

					xlsxTool_tFileOutputExcel_1.addCellValue("mes_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("dia_mes_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("dia_semana");

					xlsxTool_tFileOutputExcel_1.addCellValue("dia_semana_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("dia_ano_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("semana_ano");

					xlsxTool_tFileOutputExcel_1.addCellValue("fin_de_semana");

					xlsxTool_tFileOutputExcel_1.addCellValue("semestre");

					xlsxTool_tFileOutputExcel_1.addCellValue("semestre_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("trimestre");

					xlsxTool_tFileOutputExcel_1.addCellValue("trimestre_id");

					xlsxTool_tFileOutputExcel_1.addCellValue("bisiesto");

					xlsxTool_tFileOutputExcel_1.addCellValue("quincena");

					nb_line_tFileOutputExcel_1++;
					headerIsInserted_tFileOutputExcel_1 = true;

				}

				/**
				 * [tFileOutputExcel_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "DateAutoGenerate");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				SalidaFechasStruct SalidaFechas_tmp = new SalidaFechasStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tRowGenerator_1 begin ] start
				 */

				ok_Hash.put("tRowGenerator_1", false);
				start_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				currentComponent = "tRowGenerator_1";

				int tos_count_tRowGenerator_1 = 0;

				int nb_line_tRowGenerator_1 = 0;
				int nb_max_row_tRowGenerator_1 = 1430;

				class tRowGenerator_1Randomizer {
					public java.util.Date getRandomfecha() {

						return TalendDate.addDate(TalendDate.parseDate("yyyyMMdd", variables.fecha_inicial()),
								Numeric.sequence("s1", 0, 1), "dd");

					}
				}
				tRowGenerator_1Randomizer randtRowGenerator_1 = new tRowGenerator_1Randomizer();

				for (int itRowGenerator_1 = 0; itRowGenerator_1 < nb_max_row_tRowGenerator_1; itRowGenerator_1++) {
					DateAutoGenerate.fecha = randtRowGenerator_1.getRandomfecha();
					nb_line_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 begin ] stop
					 */

					/**
					 * [tRowGenerator_1 main ] start
					 */

					currentComponent = "tRowGenerator_1";

					tos_count_tRowGenerator_1++;

					/**
					 * [tRowGenerator_1 main ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_begin ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_begin ] stop
					 */

					/**
					 * [tMap_1 main ] start
					 */

					currentComponent = "tMap_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "DateAutoGenerate"

						);
					}

					boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

					// ###############################
					// # Input tables (lookups)
					boolean rejectedInnerJoin_tMap_1 = false;
					boolean mainRowRejected_tMap_1 = false;

					// ###############################
					{ // start of Var scope

						// ###############################
						// # Vars tables

						Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
						// ###############################
						// # Output tables

						SalidaFechas = null;

// # Output table : 'SalidaFechas'
						SalidaFechas_tmp.fecha_id = Integer
								.parseInt(TalendDate.formatDate("yyyyMMdd", DateAutoGenerate.fecha));
						SalidaFechas_tmp.fecha = DateAutoGenerate.fecha;
						SalidaFechas_tmp.ano_id = Integer
								.parseInt(TalendDate.formatDate("yyyy", DateAutoGenerate.fecha));
						SalidaFechas_tmp.mes = TalendDate.formatDate("MMMM", DateAutoGenerate.fecha);
						SalidaFechas_tmp.mes_id = Integer.parseInt(TalendDate.formatDate("MM", DateAutoGenerate.fecha));
						SalidaFechas_tmp.dia_mes_id = Integer
								.parseInt(TalendDate.formatDate("dd", DateAutoGenerate.fecha));
						SalidaFechas_tmp.dia_semana = TalendDate.formatDate("EEEE", DateAutoGenerate.fecha);
						SalidaFechas_tmp.dia_semana_id = Integer.parseInt(rutinas.Day_Week_Id(DateAutoGenerate.fecha));
						SalidaFechas_tmp.dia_ano_id = Integer
								.parseInt(TalendDate.formatDate("D", DateAutoGenerate.fecha));
						SalidaFechas_tmp.semana_ano = rutinas.Semana_Anio_Id(DateAutoGenerate.fecha);
						SalidaFechas_tmp.fin_de_semana = rutinas.End_Week(DateAutoGenerate.fecha);
						SalidaFechas_tmp.semestre = rutinas.Semester_Anio(DateAutoGenerate.fecha);
						SalidaFechas_tmp.semestre_id = rutinas.SemesterId(DateAutoGenerate.fecha);
						SalidaFechas_tmp.trimestre = rutinas.Quarter(DateAutoGenerate.fecha);
						SalidaFechas_tmp.trimestre_id = rutinas.QuarterId(DateAutoGenerate.fecha);
						SalidaFechas_tmp.bisiesto = rutinas.Leap_Year(DateAutoGenerate.fecha);
						SalidaFechas_tmp.quincena = rutinas.quincena(DateAutoGenerate.fecha);
						SalidaFechas = SalidaFechas_tmp;
// ###############################

					} // end of Var scope

					rejectedInnerJoin_tMap_1 = false;

					tos_count_tMap_1++;

					/**
					 * [tMap_1 main ] stop
					 */

					/**
					 * [tMap_1 process_data_begin ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_begin ] stop
					 */
// Start of branch "SalidaFechas"
					if (SalidaFechas != null) {

						/**
						 * [tFileOutputExcel_1 main ] start
						 */

						currentComponent = "tFileOutputExcel_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "SalidaFechas"

							);
						}

						xlsxTool_tFileOutputExcel_1.addRow();

						if (SalidaFechas.fecha_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.fecha_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.fecha != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(SalidaFechas.fecha, "dd-MM-yyyy");
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.ano_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.ano_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.mes != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.mes));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.mes_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.mes_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.dia_mes_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.dia_mes_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.dia_semana != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.dia_semana));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.dia_semana_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.dia_semana_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.dia_ano_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.dia_ano_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.semana_ano != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.semana_ano));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.fin_de_semana != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.fin_de_semana));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.semestre != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.semestre));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.semestre_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.semestre_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.trimestre != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.trimestre));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.trimestre_id != null) {

							xlsxTool_tFileOutputExcel_1
									.addCellValue(Double.parseDouble(String.valueOf(SalidaFechas.trimestre_id)));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.bisiesto != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.bisiesto));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						if (SalidaFechas.quincena != null) {

							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(SalidaFechas.quincena));
						} else {
							xlsxTool_tFileOutputExcel_1.addCellNullValue();
						}

						nb_line_tFileOutputExcel_1++;

						row1 = SalidaFechas;
						row2 = SalidaFechas;

						tos_count_tFileOutputExcel_1++;

						/**
						 * [tFileOutputExcel_1 main ] stop
						 */

						/**
						 * [tFileOutputExcel_1 process_data_begin ] start
						 */

						currentComponent = "tFileOutputExcel_1";

						/**
						 * [tFileOutputExcel_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 main ] start
						 */

						currentComponent = "tDBOutput_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						whetherReject_tDBOutput_1 = false;
						if (row1.fecha_id == null) {
							pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(1, row1.fecha_id);
						}

						if (row1.fecha != null) {
							pstmt_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(row1.fecha.getTime()));
						} else {
							pstmt_tDBOutput_1.setNull(2, java.sql.Types.DATE);
						}

						if (row1.ano_id == null) {
							pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(3, row1.ano_id);
						}

						if (row1.mes == null) {
							pstmt_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(4, row1.mes);
						}

						if (row1.mes_id == null) {
							pstmt_tDBOutput_1.setNull(5, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(5, row1.mes_id);
						}

						if (row1.dia_mes_id == null) {
							pstmt_tDBOutput_1.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(6, row1.dia_mes_id);
						}

						if (row1.dia_semana == null) {
							pstmt_tDBOutput_1.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(7, row1.dia_semana);
						}

						if (row1.dia_semana_id == null) {
							pstmt_tDBOutput_1.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(8, row1.dia_semana_id);
						}

						if (row1.dia_ano_id == null) {
							pstmt_tDBOutput_1.setNull(9, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(9, row1.dia_ano_id);
						}

						if (row1.semana_ano == null) {
							pstmt_tDBOutput_1.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(10, row1.semana_ano);
						}

						if (row1.fin_de_semana == null) {
							pstmt_tDBOutput_1.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(11, row1.fin_de_semana);
						}

						if (row1.semestre == null) {
							pstmt_tDBOutput_1.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(12, row1.semestre);
						}

						if (row1.semestre_id == null) {
							pstmt_tDBOutput_1.setNull(13, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(13, row1.semestre_id);
						}

						if (row1.trimestre == null) {
							pstmt_tDBOutput_1.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(14, row1.trimestre);
						}

						if (row1.trimestre_id == null) {
							pstmt_tDBOutput_1.setNull(15, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_1.setInt(15, row1.trimestre_id);
						}

						if (row1.bisiesto == null) {
							pstmt_tDBOutput_1.setNull(16, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(16, row1.bisiesto);
						}

						if (row1.quincena == null) {
							pstmt_tDBOutput_1.setNull(17, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_1.setString(17, row1.quincena);
						}

						pstmt_tDBOutput_1.addBatch();
						nb_line_tDBOutput_1++;
						batchSizeCounter_tDBOutput_1++;
						if (!whetherReject_tDBOutput_1) {
						}
						if (batchSize_tDBOutput_1 > 0 && batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1) {
							try {
								pstmt_tDBOutput_1.executeBatch();
							} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
								globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
								java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
										sqle_tDBOutput_1 = null;
								String errormessage_tDBOutput_1;
								if (ne_tDBOutput_1 != null) {
									// build new exception to provide the original cause
									sqle_tDBOutput_1 = new java.sql.SQLException(
											e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
											ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
											ne_tDBOutput_1);
									errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
								} else {
									errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
								}

								System.err.println(errormessage_tDBOutput_1);

							}
							tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
							insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
									? tmp_batchUpdateCount_tDBOutput_1
									: 0);
							rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
									? tmp_batchUpdateCount_tDBOutput_1
									: 0);
							batchSizeCounter_tDBOutput_1 = 0;
						}
						commitCounter_tDBOutput_1++;
						if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
							if (batchSizeCounter_tDBOutput_1 > 0) {
								try {
									pstmt_tDBOutput_1.executeBatch();
								} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
									globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
									java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
											sqle_tDBOutput_1 = null;
									String errormessage_tDBOutput_1;
									if (ne_tDBOutput_1 != null) {
										// build new exception to provide the original cause
										sqle_tDBOutput_1 = new java.sql.SQLException(
												e_tDBOutput_1.getMessage() + "\ncaused by: "
														+ ne_tDBOutput_1.getMessage(),
												ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(),
												ne_tDBOutput_1);
										errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
									} else {
										errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
									}

									System.err.println(errormessage_tDBOutput_1);

								}
								tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();
								insertedCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
								rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
										? tmp_batchUpdateCount_tDBOutput_1
										: 0);
							}
							if (rowsToCommitCount_tDBOutput_1 != 0) {

							}
							conn_tDBOutput_1.commit();
							if (rowsToCommitCount_tDBOutput_1 != 0) {

								rowsToCommitCount_tDBOutput_1 = 0;
							}
							commitCounter_tDBOutput_1 = 0;
							batchSizeCounter_tDBOutput_1 = 0;
						}

						tos_count_tDBOutput_1++;

						/**
						 * [tDBOutput_1 main ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_1 process_data_end ] start
						 */

						currentComponent = "tDBOutput_1";

						/**
						 * [tDBOutput_1 process_data_end ] stop
						 */

						/**
						 * [tDBOutput_2 main ] start
						 */

						currentComponent = "tDBOutput_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row2"

							);
						}

						whetherReject_tDBOutput_2 = false;
						if (row2.fecha_id == null) {
							pstmt_tDBOutput_2.setNull(1, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(1, row2.fecha_id);
						}

						if (row2.fecha != null) {
							date_tDBOutput_2 = row2.fecha.getTime();
							if (date_tDBOutput_2 < year1_tDBOutput_2 || date_tDBOutput_2 >= year10000_tDBOutput_2) {
								pstmt_tDBOutput_2.setString(2, "0000-00-00 00:00:00");
							} else {
								pstmt_tDBOutput_2.setTimestamp(2, new java.sql.Timestamp(date_tDBOutput_2));
							}
						} else {
							pstmt_tDBOutput_2.setNull(2, java.sql.Types.DATE);
						}

						if (row2.ano_id == null) {
							pstmt_tDBOutput_2.setNull(3, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(3, row2.ano_id);
						}

						if (row2.mes == null) {
							pstmt_tDBOutput_2.setNull(4, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(4, row2.mes);
						}

						if (row2.mes_id == null) {
							pstmt_tDBOutput_2.setNull(5, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(5, row2.mes_id);
						}

						if (row2.dia_mes_id == null) {
							pstmt_tDBOutput_2.setNull(6, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(6, row2.dia_mes_id);
						}

						if (row2.dia_semana == null) {
							pstmt_tDBOutput_2.setNull(7, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(7, row2.dia_semana);
						}

						if (row2.dia_semana_id == null) {
							pstmt_tDBOutput_2.setNull(8, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(8, row2.dia_semana_id);
						}

						if (row2.dia_ano_id == null) {
							pstmt_tDBOutput_2.setNull(9, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(9, row2.dia_ano_id);
						}

						if (row2.semana_ano == null) {
							pstmt_tDBOutput_2.setNull(10, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(10, row2.semana_ano);
						}

						if (row2.fin_de_semana == null) {
							pstmt_tDBOutput_2.setNull(11, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(11, row2.fin_de_semana);
						}

						if (row2.semestre == null) {
							pstmt_tDBOutput_2.setNull(12, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(12, row2.semestre);
						}

						if (row2.semestre_id == null) {
							pstmt_tDBOutput_2.setNull(13, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(13, row2.semestre_id);
						}

						if (row2.trimestre == null) {
							pstmt_tDBOutput_2.setNull(14, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(14, row2.trimestre);
						}

						if (row2.trimestre_id == null) {
							pstmt_tDBOutput_2.setNull(15, java.sql.Types.INTEGER);
						} else {
							pstmt_tDBOutput_2.setInt(15, row2.trimestre_id);
						}

						if (row2.bisiesto == null) {
							pstmt_tDBOutput_2.setNull(16, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(16, row2.bisiesto);
						}

						if (row2.quincena == null) {
							pstmt_tDBOutput_2.setNull(17, java.sql.Types.VARCHAR);
						} else {
							pstmt_tDBOutput_2.setString(17, row2.quincena);
						}

						pstmt_tDBOutput_2.addBatch();
						nb_line_tDBOutput_2++;

						batchSizeCounter_tDBOutput_2++;
						if (!whetherReject_tDBOutput_2) {
						}
						if (batchSize_tDBOutput_2 <= batchSizeCounter_tDBOutput_2) {
							try {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED
											? 0
											: 1);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								System.err.println(e.getMessage());
							}

							batchSizeCounter_tDBOutput_2 = 0;
						}
						commitCounter_tDBOutput_2++;

						if (commitEvery_tDBOutput_2 <= commitCounter_tDBOutput_2) {

							try {
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : 1);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
							} catch (java.sql.BatchUpdateException e) {
								globalMap.put("tDBOutput_2_ERROR_MESSAGE", e.getMessage());
								int countSum_tDBOutput_2 = 0;
								for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
									countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
								}
								rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;
								insertedCount_tDBOutput_2 += countSum_tDBOutput_2;
								System.err.println(e.getMessage());

							}
							if (rowsToCommitCount_tDBOutput_2 != 0) {
							}
							conn_tDBOutput_2.commit();
							if (rowsToCommitCount_tDBOutput_2 != 0) {
								rowsToCommitCount_tDBOutput_2 = 0;
							}
							commitCounter_tDBOutput_2 = 0;

						}

						tos_count_tDBOutput_2++;

						/**
						 * [tDBOutput_2 main ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_begin ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_begin ] stop
						 */

						/**
						 * [tDBOutput_2 process_data_end ] start
						 */

						currentComponent = "tDBOutput_2";

						/**
						 * [tDBOutput_2 process_data_end ] stop
						 */

						/**
						 * [tFileOutputExcel_1 process_data_end ] start
						 */

						currentComponent = "tFileOutputExcel_1";

						/**
						 * [tFileOutputExcel_1 process_data_end ] stop
						 */

					} // End of branch "SalidaFechas"

					/**
					 * [tMap_1 process_data_end ] start
					 */

					currentComponent = "tMap_1";

					/**
					 * [tMap_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 process_data_end ] start
					 */

					currentComponent = "tRowGenerator_1";

					/**
					 * [tRowGenerator_1 process_data_end ] stop
					 */

					/**
					 * [tRowGenerator_1 end ] start
					 */

					currentComponent = "tRowGenerator_1";

				}
				globalMap.put("tRowGenerator_1_NB_LINE", nb_line_tRowGenerator_1);

				ok_Hash.put("tRowGenerator_1", true);
				end_Hash.put("tRowGenerator_1", System.currentTimeMillis());

				/**
				 * [tRowGenerator_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "DateAutoGenerate");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputExcel_1 end ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1, true);

				if (headerIsInserted_tFileOutputExcel_1 && nb_line_tFileOutputExcel_1 > 0) {
					nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 - 1;
				}
				globalMap.put("tFileOutputExcel_1_NB_LINE", nb_line_tFileOutputExcel_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "SalidaFechas");
				}

				ok_Hash.put("tFileOutputExcel_1", true);
				end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());

				/**
				 * [tFileOutputExcel_1 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				if (batchSizeCounter_tDBOutput_1 > 0) {
					try {
						if (pstmt_tDBOutput_1 != null) {

							pstmt_tDBOutput_1.executeBatch();

						}
					} catch (java.sql.BatchUpdateException e_tDBOutput_1) {
						globalMap.put("tDBOutput_1_ERROR_MESSAGE", e_tDBOutput_1.getMessage());
						java.sql.SQLException ne_tDBOutput_1 = e_tDBOutput_1.getNextException(),
								sqle_tDBOutput_1 = null;
						String errormessage_tDBOutput_1;
						if (ne_tDBOutput_1 != null) {
							// build new exception to provide the original cause
							sqle_tDBOutput_1 = new java.sql.SQLException(
									e_tDBOutput_1.getMessage() + "\ncaused by: " + ne_tDBOutput_1.getMessage(),
									ne_tDBOutput_1.getSQLState(), ne_tDBOutput_1.getErrorCode(), ne_tDBOutput_1);
							errormessage_tDBOutput_1 = sqle_tDBOutput_1.getMessage();
						} else {
							errormessage_tDBOutput_1 = e_tDBOutput_1.getMessage();
						}

						System.err.println(errormessage_tDBOutput_1);

					}
					if (pstmt_tDBOutput_1 != null) {
						tmp_batchUpdateCount_tDBOutput_1 = pstmt_tDBOutput_1.getUpdateCount();

						insertedCount_tDBOutput_1

								+= (tmp_batchUpdateCount_tDBOutput_1 != -1 ? tmp_batchUpdateCount_tDBOutput_1 : 0);
						rowsToCommitCount_tDBOutput_1 += (tmp_batchUpdateCount_tDBOutput_1 != -1
								? tmp_batchUpdateCount_tDBOutput_1
								: 0);
					}
				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

				}
				conn_tDBOutput_1.commit();
				if (commitCounter_tDBOutput_1 > 0 && rowsToCommitCount_tDBOutput_1 != 0) {

					rowsToCommitCount_tDBOutput_1 = 0;
				}
				commitCounter_tDBOutput_1 = 0;

				conn_tDBOutput_1.close();

				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tDBCommit_1Process(globalMap);

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tDBOutput_2 end ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (batchSizeCounter_tDBOutput_2 != 0) {
						int countSum_tDBOutput_2 = 0;

						for (int countEach_tDBOutput_2 : pstmt_tDBOutput_2.executeBatch()) {
							countSum_tDBOutput_2 += (countEach_tDBOutput_2 == java.sql.Statement.EXECUTE_FAILED ? 0
									: 1);
						}
						rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

						insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					}

				} catch (java.sql.BatchUpdateException e) {
					globalMap.put(currentComponent + "_ERROR_MESSAGE", e.getMessage());

					int countSum_tDBOutput_2 = 0;
					for (int countEach_tDBOutput_2 : e.getUpdateCounts()) {
						countSum_tDBOutput_2 += (countEach_tDBOutput_2 < 0 ? 0 : countEach_tDBOutput_2);
					}
					rowsToCommitCount_tDBOutput_2 += countSum_tDBOutput_2;

					insertedCount_tDBOutput_2 += countSum_tDBOutput_2;

					System.err.println(e.getMessage());

				}
				batchSizeCounter_tDBOutput_2 = 0;

				if (pstmt_tDBOutput_2 != null) {

					pstmt_tDBOutput_2.close();
					resourceMap.remove("pstmt_tDBOutput_2");

				}
				resourceMap.put("statementClosed_tDBOutput_2", true);
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

				}
				conn_tDBOutput_2.commit();
				if (commitCounter_tDBOutput_2 > 0 && rowsToCommitCount_tDBOutput_2 != 0) {

					rowsToCommitCount_tDBOutput_2 = 0;
				}
				commitCounter_tDBOutput_2 = 0;

				conn_tDBOutput_2.close();

				resourceMap.put("finish_tDBOutput_2", true);

				nb_line_deleted_tDBOutput_2 = nb_line_deleted_tDBOutput_2 + deletedCount_tDBOutput_2;
				nb_line_update_tDBOutput_2 = nb_line_update_tDBOutput_2 + updatedCount_tDBOutput_2;
				nb_line_inserted_tDBOutput_2 = nb_line_inserted_tDBOutput_2 + insertedCount_tDBOutput_2;
				nb_line_rejected_tDBOutput_2 = nb_line_rejected_tDBOutput_2 + rejectedCount_tDBOutput_2;

				globalMap.put("tDBOutput_2_NB_LINE", nb_line_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_UPDATED", nb_line_update_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_DELETED", nb_line_deleted_tDBOutput_2);
				globalMap.put("tDBOutput_2_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tDBOutput_2", true);
				end_Hash.put("tDBOutput_2", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tDBCommit_2Process(globalMap);

				/**
				 * [tDBOutput_2 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRowGenerator_1 finally ] start
				 */

				currentComponent = "tRowGenerator_1";

				/**
				 * [tRowGenerator_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputExcel_1 finally ] start
				 */

				currentComponent = "tFileOutputExcel_1";

				/**
				 * [tFileOutputExcel_1 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tDBOutput_2 finally ] start
				 */

				currentComponent = "tDBOutput_2";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_2") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_2 = null;
						if ((pstmtToClose_tDBOutput_2 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_2")) != null) {
							pstmtToClose_tDBOutput_2.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_2") == null) {
						java.sql.Connection ctn_tDBOutput_2 = null;
						if ((ctn_tDBOutput_2 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_2")) != null) {
							try {
								ctn_tDBOutput_2.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_2) {
								String errorMessage_tDBOutput_2 = "failed to close the connection in tDBOutput_2 :"
										+ sqlEx_tDBOutput_2.getMessage();
								System.err.println(errorMessage_tDBOutput_2);
							}
						}
					}
				}

				/**
				 * [tDBOutput_2 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_1 begin ] start
				 */

				ok_Hash.put("tDBCommit_1", false);
				start_Hash.put("tDBCommit_1", System.currentTimeMillis());

				currentComponent = "tDBCommit_1";

				int tos_count_tDBCommit_1 = 0;

				/**
				 * [tDBCommit_1 begin ] stop
				 */

				/**
				 * [tDBCommit_1 main ] start
				 */

				currentComponent = "tDBCommit_1";

				java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed()) {

					try {

						conn_tDBCommit_1.commit();

					} finally {

						conn_tDBCommit_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_1++;

				/**
				 * [tDBCommit_1 main ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_1 process_data_end ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_1 end ] start
				 */

				currentComponent = "tDBCommit_1";

				ok_Hash.put("tDBCommit_1", true);
				end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				/**
				 * [tDBCommit_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_1 finally ] start
				 */

				currentComponent = "tDBCommit_1";

				/**
				 * [tDBCommit_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_1_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_1 begin ] start
				 */

				ok_Hash.put("tDBRollback_1", false);
				start_Hash.put("tDBRollback_1", System.currentTimeMillis());

				currentComponent = "tDBRollback_1";

				int tos_count_tDBRollback_1 = 0;

				/**
				 * [tDBRollback_1 begin ] stop
				 */

				/**
				 * [tDBRollback_1 main ] start
				 */

				currentComponent = "tDBRollback_1";

				java.sql.Connection conn_tDBRollback_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				if (conn_tDBRollback_1 != null && !conn_tDBRollback_1.isClosed()) {

					try {

						conn_tDBRollback_1.rollback();

					} finally {

						conn_tDBRollback_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_1"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBRollback_1++;

				/**
				 * [tDBRollback_1 main ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_1 process_data_end ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_1 end ] start
				 */

				currentComponent = "tDBRollback_1";

				ok_Hash.put("tDBRollback_1", true);
				end_Hash.put("tDBRollback_1", System.currentTimeMillis());

				/**
				 * [tDBRollback_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_1 finally ] start
				 */

				currentComponent = "tDBRollback_1";

				/**
				 * [tDBRollback_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_1_SUBPROCESS_STATE", 1);
	}

	public void tDBCommit_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBCommit_2 begin ] start
				 */

				ok_Hash.put("tDBCommit_2", false);
				start_Hash.put("tDBCommit_2", System.currentTimeMillis());

				currentComponent = "tDBCommit_2";

				int tos_count_tDBCommit_2 = 0;

				/**
				 * [tDBCommit_2 begin ] stop
				 */

				/**
				 * [tDBCommit_2 main ] start
				 */

				currentComponent = "tDBCommit_2";

				java.sql.Connection conn_tDBCommit_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				if (conn_tDBCommit_2 != null && !conn_tDBCommit_2.isClosed()) {

					try {

						conn_tDBCommit_2.commit();

					} finally {

						conn_tDBCommit_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_2"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBCommit_2++;

				/**
				 * [tDBCommit_2 main ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_begin ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_begin ] stop
				 */

				/**
				 * [tDBCommit_2 process_data_end ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 process_data_end ] stop
				 */

				/**
				 * [tDBCommit_2 end ] start
				 */

				currentComponent = "tDBCommit_2";

				ok_Hash.put("tDBCommit_2", true);
				end_Hash.put("tDBCommit_2", System.currentTimeMillis());

				/**
				 * [tDBCommit_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBCommit_2 finally ] start
				 */

				currentComponent = "tDBCommit_2";

				/**
				 * [tDBCommit_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBCommit_2_SUBPROCESS_STATE", 1);
	}

	public void tDBRollback_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBRollback_2 begin ] start
				 */

				ok_Hash.put("tDBRollback_2", false);
				start_Hash.put("tDBRollback_2", System.currentTimeMillis());

				currentComponent = "tDBRollback_2";

				int tos_count_tDBRollback_2 = 0;

				/**
				 * [tDBRollback_2 begin ] stop
				 */

				/**
				 * [tDBRollback_2 main ] start
				 */

				currentComponent = "tDBRollback_2";

				java.sql.Connection conn_tDBRollback_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_2");

				if (conn_tDBRollback_2 != null && !conn_tDBRollback_2.isClosed()) {

					try {

						conn_tDBRollback_2.rollback();

					} finally {

						conn_tDBRollback_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_tDBConnection_2"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				tos_count_tDBRollback_2++;

				/**
				 * [tDBRollback_2 main ] stop
				 */

				/**
				 * [tDBRollback_2 process_data_begin ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 process_data_begin ] stop
				 */

				/**
				 * [tDBRollback_2 process_data_end ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 process_data_end ] stop
				 */

				/**
				 * [tDBRollback_2 end ] start
				 */

				currentComponent = "tDBRollback_2";

				ok_Hash.put("tDBRollback_2", true);
				end_Hash.put("tDBRollback_2", System.currentTimeMillis());

				/**
				 * [tDBRollback_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBRollback_2 finally ] start
				 */

				currentComponent = "tDBRollback_2";

				/**
				 * [tDBRollback_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBRollback_2_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final DimTime DimTimeClass = new DimTime();

		int exitCode = DimTimeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = DimTime.class.getClassLoader()
					.getResourceAsStream("costoshospitalaria/dimtime_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = DimTime.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRowGenerator_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRowGenerator_1) {
			globalMap.put("tRowGenerator_1_SUBPROCESS_STATE", -1);

			e_tRowGenerator_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : DimTime");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 166503 characters generated by Talend Open Studio for Data Integration on the
 * 20 de junio de 2022, 9:51:41 COT
 ************************************************************************************************/