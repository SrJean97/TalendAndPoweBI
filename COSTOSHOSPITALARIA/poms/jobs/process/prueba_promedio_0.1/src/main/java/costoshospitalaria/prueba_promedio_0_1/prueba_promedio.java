// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package costoshospitalaria.prueba_promedio_0_1;

import routines.Numeric;
import routines.Tratamiento_de_datos;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.rutinas;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: prueba_promedio Purpose: prueba_promedio<br>
 * Description: prueba_promedio <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class prueba_promedio implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "prueba_promedio";
	private final String projectName = "COSTOSHOSPITALARIA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					prueba_promedio.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(prueba_promedio.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public Integer COSTOS;

		public Integer getCOSTOS() {
			return this.COSTOS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.MES = readString(dis);

					this.ANO = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.MES = readString(dis);

					this.ANO = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.ANO, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.ANO, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MES=" + MES);
			sb.append(",ANO=" + ANO);
			sb.append(",COSTOS=" + String.valueOf(COSTOS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public Integer COSTOS;

		public Integer getCOSTOS() {
			return this.COSTOS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.MES = readString(dis);

					this.ANO = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.MES = readString(dis);

					this.ANO = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.ANO, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.ANO, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("MES=" + MES);
			sb.append(",ANO=" + ANO);
			sb.append(",COSTOS=" + String.valueOf(COSTOS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class promedio_edadesStruct implements routines.system.IPersistableRow<promedio_edadesStruct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public Integer COSTOS;

		public Integer getCOSTOS() {
			return this.COSTOS;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.ANO = readString(dis);

					this.MES = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.ANO = readString(dis);

					this.MES = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.MES, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.MES, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ANO=" + ANO);
			sb.append(",MES=" + MES);
			sb.append(",COSTOS=" + String.valueOf(COSTOS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(promedio_edadesStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class salidaStruct implements routines.system.IPersistableRow<salidaStruct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public java.util.Date FECHA_DE_ACCIDENTE;

		public java.util.Date getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public Integer COSTOS;

		public Integer getCOSTOS() {
			return this.COSTOS;
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.FECHA_DE_ACCIDENTE = readDate(dis);

					this.MES = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.FECHA_DE_ACCIDENTE = readDate(dis);

					this.MES = readString(dis);

					this.COSTOS = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.MES, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.MES, dos);

				// Integer

				writeInteger(this.COSTOS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("FECHA_DE_ACCIDENTE=" + String.valueOf(FECHA_DE_ACCIDENTE));
			sb.append(",MES=" + MES);
			sb.append(",COSTOS=" + String.valueOf(COSTOS));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salidaStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public Integer Numero;

		public Integer getNumero() {
			return this.Numero;
		}

		public String EDAD;

		public String getEDAD() {
			return this.EDAD;
		}

		public String SEXO;

		public String getSEXO() {
			return this.SEXO;
		}

		public String TIPO_DE_VEHICULO;

		public String getTIPO_DE_VEHICULO() {
			return this.TIPO_DE_VEHICULO;
		}

		public String RELACION_USUARIO_ACCIDENTE;

		public String getRELACION_USUARIO_ACCIDENTE() {
			return this.RELACION_USUARIO_ACCIDENTE;
		}

		public String FECHA_DE_ACCIDENTE;

		public String getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String FECHA_DE_INGRESO_IPS;

		public String getFECHA_DE_INGRESO_IPS() {
			return this.FECHA_DE_INGRESO_IPS;
		}

		public String HORA_DE_ACCIDENTE;

		public String getHORA_DE_ACCIDENTE() {
			return this.HORA_DE_ACCIDENTE;
		}

		public String HORA_DE_INGRESO_IPS;

		public String getHORA_DE_INGRESO_IPS() {
			return this.HORA_DE_INGRESO_IPS;
		}

		public String FECHA_DE__ATENCION_MEDICA;

		public String getFECHA_DE__ATENCION_MEDICA() {
			return this.FECHA_DE__ATENCION_MEDICA;
		}

		public String HORA_DE_ATENCION_MEDICA;

		public String getHORA_DE_ATENCION_MEDICA() {
			return this.HORA_DE_ATENCION_MEDICA;
		}

		public String REQUERIMIENTO_DE_CX;

		public String getREQUERIMIENTO_DE_CX() {
			return this.REQUERIMIENTO_DE_CX;
		}

		public String REFERIDO_A_OTRA_IPS;

		public String getREFERIDO_A_OTRA_IPS() {
			return this.REFERIDO_A_OTRA_IPS;
		}

		public String REGION_ANATOMICA_MAS_AFECTADA;

		public String getREGION_ANATOMICA_MAS_AFECTADA() {
			return this.REGION_ANATOMICA_MAS_AFECTADA;
		}

		public String POLITRAUMATISMO;

		public String getPOLITRAUMATISMO() {
			return this.POLITRAUMATISMO;
		}

		public String TIPO_AFILIACION;

		public String getTIPO_AFILIACION() {
			return this.TIPO_AFILIACION;
		}

		public String EPS_USUARIO;

		public String getEPS_USUARIO() {
			return this.EPS_USUARIO;
		}

		public String CONDICION_EGRESO;

		public String getCONDICION_EGRESO() {
			return this.CONDICION_EGRESO;
		}

		public String OPORTUNIDAD_CITAS_DE_CONTROL;

		public String getOPORTUNIDAD_CITAS_DE_CONTROL() {
			return this.OPORTUNIDAD_CITAS_DE_CONTROL;
		}

		public String COSTOS;

		public String getCOSTOS() {
			return this.COSTOS;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String IPS;

		public String getIPS() {
			return this.IPS;
		}

		public String GRUPO_ETAREO;

		public String getGRUPO_ETAREO() {
			return this.GRUPO_ETAREO;
		}

		public String CURSO_DE_VIDA;

		public String getCURSO_DE_VIDA() {
			return this.CURSO_DE_VIDA;
		}

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public String DIA_SEMANA;

		public String getDIA_SEMANA() {
			return this.DIA_SEMANA;
		}

		public String Codigo_Administradora;

		public String getCodigo_Administradora() {
			return this.Codigo_Administradora;
		}

		public String Administradora;

		public String getAdministradora() {
			return this.Administradora;
		}

		public String Tipo_Administradora;

		public String getTipo_Administradora() {
			return this.Tipo_Administradora;
		}

		public String Codigo_RIPS;

		public String getCodigo_RIPS() {
			return this.Codigo_RIPS;
		}

		public String Descripcion_RIPS;

		public String getDescripcion_RIPS() {
			return this.Descripcion_RIPS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readString(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Codigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readString(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Codigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Codigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Codigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero=" + String.valueOf(Numero));
			sb.append(",EDAD=" + EDAD);
			sb.append(",SEXO=" + SEXO);
			sb.append(",TIPO_DE_VEHICULO=" + TIPO_DE_VEHICULO);
			sb.append(",RELACION_USUARIO_ACCIDENTE=" + RELACION_USUARIO_ACCIDENTE);
			sb.append(",FECHA_DE_ACCIDENTE=" + FECHA_DE_ACCIDENTE);
			sb.append(",FECHA_DE_INGRESO_IPS=" + FECHA_DE_INGRESO_IPS);
			sb.append(",HORA_DE_ACCIDENTE=" + HORA_DE_ACCIDENTE);
			sb.append(",HORA_DE_INGRESO_IPS=" + HORA_DE_INGRESO_IPS);
			sb.append(",FECHA_DE__ATENCION_MEDICA=" + FECHA_DE__ATENCION_MEDICA);
			sb.append(",HORA_DE_ATENCION_MEDICA=" + HORA_DE_ATENCION_MEDICA);
			sb.append(",REQUERIMIENTO_DE_CX=" + REQUERIMIENTO_DE_CX);
			sb.append(",REFERIDO_A_OTRA_IPS=" + REFERIDO_A_OTRA_IPS);
			sb.append(",REGION_ANATOMICA_MAS_AFECTADA=" + REGION_ANATOMICA_MAS_AFECTADA);
			sb.append(",POLITRAUMATISMO=" + POLITRAUMATISMO);
			sb.append(",TIPO_AFILIACION=" + TIPO_AFILIACION);
			sb.append(",EPS_USUARIO=" + EPS_USUARIO);
			sb.append(",CONDICION_EGRESO=" + CONDICION_EGRESO);
			sb.append(",OPORTUNIDAD_CITAS_DE_CONTROL=" + OPORTUNIDAD_CITAS_DE_CONTROL);
			sb.append(",COSTOS=" + COSTOS);
			sb.append(",MES=" + MES);
			sb.append(",IPS=" + IPS);
			sb.append(",GRUPO_ETAREO=" + GRUPO_ETAREO);
			sb.append(",CURSO_DE_VIDA=" + CURSO_DE_VIDA);
			sb.append(",ANO=" + ANO);
			sb.append(",DIA_SEMANA=" + DIA_SEMANA);
			sb.append(",Codigo_Administradora=" + Codigo_Administradora);
			sb.append(",Administradora=" + Administradora);
			sb.append(",Tipo_Administradora=" + Tipo_Administradora);
			sb.append(",Codigo_RIPS=" + Codigo_RIPS);
			sb.append(",Descripcion_RIPS=" + Descripcion_RIPS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_1Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];

		public Integer Numero;

		public Integer getNumero() {
			return this.Numero;
		}

		public String EDAD;

		public String getEDAD() {
			return this.EDAD;
		}

		public String SEXO;

		public String getSEXO() {
			return this.SEXO;
		}

		public String TIPO_DE_VEHICULO;

		public String getTIPO_DE_VEHICULO() {
			return this.TIPO_DE_VEHICULO;
		}

		public String RELACION_USUARIO_ACCIDENTE;

		public String getRELACION_USUARIO_ACCIDENTE() {
			return this.RELACION_USUARIO_ACCIDENTE;
		}

		public String FECHA_DE_ACCIDENTE;

		public String getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String FECHA_DE_INGRESO_IPS;

		public String getFECHA_DE_INGRESO_IPS() {
			return this.FECHA_DE_INGRESO_IPS;
		}

		public String HORA_DE_ACCIDENTE;

		public String getHORA_DE_ACCIDENTE() {
			return this.HORA_DE_ACCIDENTE;
		}

		public String HORA_DE_INGRESO_IPS;

		public String getHORA_DE_INGRESO_IPS() {
			return this.HORA_DE_INGRESO_IPS;
		}

		public String FECHA_DE__ATENCION_MEDICA;

		public String getFECHA_DE__ATENCION_MEDICA() {
			return this.FECHA_DE__ATENCION_MEDICA;
		}

		public String HORA_DE_ATENCION_MEDICA;

		public String getHORA_DE_ATENCION_MEDICA() {
			return this.HORA_DE_ATENCION_MEDICA;
		}

		public String REQUERIMIENTO_DE_CX;

		public String getREQUERIMIENTO_DE_CX() {
			return this.REQUERIMIENTO_DE_CX;
		}

		public String REFERIDO_A_OTRA_IPS;

		public String getREFERIDO_A_OTRA_IPS() {
			return this.REFERIDO_A_OTRA_IPS;
		}

		public String REGION_ANATOMICA_MAS_AFECTADA;

		public String getREGION_ANATOMICA_MAS_AFECTADA() {
			return this.REGION_ANATOMICA_MAS_AFECTADA;
		}

		public String POLITRAUMATISMO;

		public String getPOLITRAUMATISMO() {
			return this.POLITRAUMATISMO;
		}

		public String TIPO_AFILIACION;

		public String getTIPO_AFILIACION() {
			return this.TIPO_AFILIACION;
		}

		public String EPS_USUARIO;

		public String getEPS_USUARIO() {
			return this.EPS_USUARIO;
		}

		public String CONDICION_EGRESO;

		public String getCONDICION_EGRESO() {
			return this.CONDICION_EGRESO;
		}

		public String OPORTUNIDAD_CITAS_DE_CONTROL;

		public String getOPORTUNIDAD_CITAS_DE_CONTROL() {
			return this.OPORTUNIDAD_CITAS_DE_CONTROL;
		}

		public String COSTOS;

		public String getCOSTOS() {
			return this.COSTOS;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String IPS;

		public String getIPS() {
			return this.IPS;
		}

		public String GRUPO_ETAREO;

		public String getGRUPO_ETAREO() {
			return this.GRUPO_ETAREO;
		}

		public String CURSO_DE_VIDA;

		public String getCURSO_DE_VIDA() {
			return this.CURSO_DE_VIDA;
		}

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public String DIA_SEMANA;

		public String getDIA_SEMANA() {
			return this.DIA_SEMANA;
		}

		public String Codigo_Administradora;

		public String getCodigo_Administradora() {
			return this.Codigo_Administradora;
		}

		public String Administradora;

		public String getAdministradora() {
			return this.Administradora;
		}

		public String Tipo_Administradora;

		public String getTipo_Administradora() {
			return this.Tipo_Administradora;
		}

		public String Codigo_RIPS;

		public String getCodigo_RIPS() {
			return this.Codigo_RIPS;
		}

		public String Descripcion_RIPS;

		public String getDescripcion_RIPS() {
			return this.Descripcion_RIPS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_prueba_promedio.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_prueba_promedio, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readString(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Codigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readString(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Codigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Codigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// String

				writeString(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Codigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero=" + String.valueOf(Numero));
			sb.append(",EDAD=" + EDAD);
			sb.append(",SEXO=" + SEXO);
			sb.append(",TIPO_DE_VEHICULO=" + TIPO_DE_VEHICULO);
			sb.append(",RELACION_USUARIO_ACCIDENTE=" + RELACION_USUARIO_ACCIDENTE);
			sb.append(",FECHA_DE_ACCIDENTE=" + FECHA_DE_ACCIDENTE);
			sb.append(",FECHA_DE_INGRESO_IPS=" + FECHA_DE_INGRESO_IPS);
			sb.append(",HORA_DE_ACCIDENTE=" + HORA_DE_ACCIDENTE);
			sb.append(",HORA_DE_INGRESO_IPS=" + HORA_DE_INGRESO_IPS);
			sb.append(",FECHA_DE__ATENCION_MEDICA=" + FECHA_DE__ATENCION_MEDICA);
			sb.append(",HORA_DE_ATENCION_MEDICA=" + HORA_DE_ATENCION_MEDICA);
			sb.append(",REQUERIMIENTO_DE_CX=" + REQUERIMIENTO_DE_CX);
			sb.append(",REFERIDO_A_OTRA_IPS=" + REFERIDO_A_OTRA_IPS);
			sb.append(",REGION_ANATOMICA_MAS_AFECTADA=" + REGION_ANATOMICA_MAS_AFECTADA);
			sb.append(",POLITRAUMATISMO=" + POLITRAUMATISMO);
			sb.append(",TIPO_AFILIACION=" + TIPO_AFILIACION);
			sb.append(",EPS_USUARIO=" + EPS_USUARIO);
			sb.append(",CONDICION_EGRESO=" + CONDICION_EGRESO);
			sb.append(",OPORTUNIDAD_CITAS_DE_CONTROL=" + OPORTUNIDAD_CITAS_DE_CONTROL);
			sb.append(",COSTOS=" + COSTOS);
			sb.append(",MES=" + MES);
			sb.append(",IPS=" + IPS);
			sb.append(",GRUPO_ETAREO=" + GRUPO_ETAREO);
			sb.append(",CURSO_DE_VIDA=" + CURSO_DE_VIDA);
			sb.append(",ANO=" + ANO);
			sb.append(",DIA_SEMANA=" + DIA_SEMANA);
			sb.append(",Codigo_Administradora=" + Codigo_Administradora);
			sb.append(",Administradora=" + Administradora);
			sb.append(",Tipo_Administradora=" + Tipo_Administradora);
			sb.append(",Codigo_RIPS=" + Codigo_RIPS);
			sb.append(",Descripcion_RIPS=" + Descripcion_RIPS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);

				row3Struct row3 = new row3Struct();
				salidaStruct salida = new salidaStruct();
				promedio_edadesStruct promedio_edades = new promedio_edadesStruct();
				row2Struct row2 = new row2Struct();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "promedio_edades");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String ANO;
					String MES;
					Integer COSTOS_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.ANO == null) ? 0 : this.ANO.hashCode());

							result = prime * result + ((this.MES == null) ? 0 : this.MES.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.ANO == null) {
							if (other.ANO != null)
								return false;
						} else if (!this.ANO.equals(other.ANO))
							return false;

						if (this.MES == null) {
							if (other.MES != null)
								return false;
						} else if (!this.MES.equals(other.MES))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "salida");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) globalMap
						.get("tHash_Lookup_row1"));

				row1Struct row1HashKey = new row1Struct();
				row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				promedio_edadesStruct promedio_edades_tmp = new promedio_edadesStruct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				salidaStruct salida_tmp = new salidaStruct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;

				char fieldSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Field Separator) by 'context.fs' or
				// 'globalMap.get("fs")'.
				if (((String) ";").length() > 0) {
					fieldSeparator_tFileInputDelimited_1 = ((String) ";").toCharArray();
				} else {
					throw new IllegalArgumentException("Field Separator must be assigned a char.");
				}

				char rowSeparator_tFileInputDelimited_1[] = null;

				// support passing value (property: Row Separator) by 'context.rs' or
				// 'globalMap.get("rs")'.
				if (((String) "\n").length() > 0) {
					rowSeparator_tFileInputDelimited_1 = ((String) "\n").toCharArray();
				} else {
					throw new IllegalArgumentException("Row Separator must be assigned a char.");
				}

				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */
						"D:/Documentos/2022/Documentos/2022-1 Universidad/5. Base de datos avanzada/Documentos/costos_atencion_hospitalaria_bucaramanga.csv"/**
																																							 * End
																																							 * field
																																							 * tFileInputDelimited_1:FILENAME
																																							 */
				;
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;

				try {

					String[] rowtFileInputDelimited_1 = null;
					int currentLinetFileInputDelimited_1 = 0;
					int outputLinetFileInputDelimited_1 = 0;
					try {// TD110 begin
						if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

							int footer_value_tFileInputDelimited_1 = 0;
							if (footer_value_tFileInputDelimited_1 > 0) {
								throw new java.lang.Exception(
										"When the input source is a stream,footer shouldn't be bigger than 0.");
							}

							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									(java.io.InputStream) filename_tFileInputDelimited_1,
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						} else {
							csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
									String.valueOf(filename_tFileInputDelimited_1),
									fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						}

						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
								&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
							csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

						csvReadertFileInputDelimited_1.setQuoteChar('"');

						csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						if (footer_tFileInputDelimited_1 > 0) {
							for (totalLinetFileInputDelimited_1 = 0; totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
							csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
							while (csvReadertFileInputDelimited_1.readNext()) {

								totalLinetFileInputDelimited_1++;

							}
							int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1
									- footer_tFileInputDelimited_1 < 0 ? 0
											: totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1;
							if (lastLinetFileInputDelimited_1 > 0) {
								lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1
										? lastLinetFileInputDelimited_1
										: lastLineTemptFileInputDelimited_1;
							} else {
								lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
							}

							csvReadertFileInputDelimited_1.close();
							if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										(java.io.InputStream) filename_tFileInputDelimited_1,
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							} else {
								csvReadertFileInputDelimited_1 = new com.talend.csv.CSVReader(
										String.valueOf(filename_tFileInputDelimited_1),
										fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}
							csvReadertFileInputDelimited_1.setTrimWhitespace(false);
							if ((rowSeparator_tFileInputDelimited_1[0] != '\n')
									&& (rowSeparator_tFileInputDelimited_1[0] != '\r'))
								csvReadertFileInputDelimited_1.setLineEnd("" + rowSeparator_tFileInputDelimited_1[0]);

							csvReadertFileInputDelimited_1.setQuoteChar('"');

							csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());

						}

						if (limittFileInputDelimited_1 != 0) {
							for (currentLinetFileInputDelimited_1 = 0; currentLinetFileInputDelimited_1 < 1; currentLinetFileInputDelimited_1++) {
								csvReadertFileInputDelimited_1.readNext();
							}
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);

					} catch (java.lang.Exception e) {
						globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						System.err.println(e.getMessage());

					} // TD110 end

					while (limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1 != null
							&& csvReadertFileInputDelimited_1.readNext()) {
						rowstate_tFileInputDelimited_1.reset();

						rowtFileInputDelimited_1 = csvReadertFileInputDelimited_1.getValues();

						currentLinetFileInputDelimited_1++;

						if (lastLinetFileInputDelimited_1 > -1
								&& currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
							break;
						}
						outputLinetFileInputDelimited_1++;
						if (limittFileInputDelimited_1 > 0
								&& outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
							break;
						}

						row3 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row3 = new row3Struct();
						try {

							char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
							// support passing value (property: Field Separator) by 'context.fs' or
							// 'globalMap.get("fs")'.
							if (((String) ";").length() > 0) {
								fieldSeparator_tFileInputDelimited_1_ListType = ((String) ";").toCharArray();
							} else {
								throw new IllegalArgumentException("Field Separator must be assigned a char.");
							}
							if (rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])) {// empty
																														// line
																														// when
																														// row
																														// separator
																														// is
																														// '\n'

								row3.Numero = null;

								row3.EDAD = null;

								row3.SEXO = null;

								row3.TIPO_DE_VEHICULO = null;

								row3.RELACION_USUARIO_ACCIDENTE = null;

								row3.FECHA_DE_ACCIDENTE = null;

								row3.FECHA_DE_INGRESO_IPS = null;

								row3.HORA_DE_ACCIDENTE = null;

								row3.HORA_DE_INGRESO_IPS = null;

								row3.FECHA_DE__ATENCION_MEDICA = null;

								row3.HORA_DE_ATENCION_MEDICA = null;

								row3.REQUERIMIENTO_DE_CX = null;

								row3.REFERIDO_A_OTRA_IPS = null;

								row3.REGION_ANATOMICA_MAS_AFECTADA = null;

								row3.POLITRAUMATISMO = null;

								row3.TIPO_AFILIACION = null;

								row3.EPS_USUARIO = null;

								row3.CONDICION_EGRESO = null;

								row3.OPORTUNIDAD_CITAS_DE_CONTROL = null;

								row3.COSTOS = null;

								row3.MES = null;

								row3.IPS = null;

								row3.GRUPO_ETAREO = null;

								row3.CURSO_DE_VIDA = null;

								row3.ANO = null;

								row3.DIA_SEMANA = null;

								row3.Codigo_Administradora = null;

								row3.Administradora = null;

								row3.Tipo_Administradora = null;

								row3.Codigo_RIPS = null;

								row3.Descripcion_RIPS = null;

							} else {

								int columnIndexWithD_tFileInputDelimited_1 = 0; // Column Index

								columnIndexWithD_tFileInputDelimited_1 = 0;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									if (rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {

											row3.Numero = ParserUtils.parseTo_Integer(
													rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);

										} catch (java.lang.Exception ex_tFileInputDelimited_1) {
											globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",
													ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String
													.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
															"Numero", "row3",
															rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1],
															ex_tFileInputDelimited_1),
													ex_tFileInputDelimited_1));
										}
									} else {

										row3.Numero = null;

									}

								} else {

									row3.Numero = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 1;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.EDAD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.EDAD = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 2;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.SEXO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.SEXO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 3;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.TIPO_DE_VEHICULO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.TIPO_DE_VEHICULO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 4;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.RELACION_USUARIO_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.RELACION_USUARIO_ACCIDENTE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 5;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.FECHA_DE_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.FECHA_DE_ACCIDENTE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 6;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.FECHA_DE_INGRESO_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.FECHA_DE_INGRESO_IPS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 7;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.HORA_DE_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.HORA_DE_ACCIDENTE = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 8;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.HORA_DE_INGRESO_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.HORA_DE_INGRESO_IPS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 9;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.FECHA_DE__ATENCION_MEDICA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.FECHA_DE__ATENCION_MEDICA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 10;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.HORA_DE_ATENCION_MEDICA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.HORA_DE_ATENCION_MEDICA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 11;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.REQUERIMIENTO_DE_CX = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.REQUERIMIENTO_DE_CX = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 12;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.REFERIDO_A_OTRA_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.REFERIDO_A_OTRA_IPS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 13;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.REGION_ANATOMICA_MAS_AFECTADA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.REGION_ANATOMICA_MAS_AFECTADA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 14;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.POLITRAUMATISMO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.POLITRAUMATISMO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 15;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.TIPO_AFILIACION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.TIPO_AFILIACION = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 16;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.EPS_USUARIO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.EPS_USUARIO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 17;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.CONDICION_EGRESO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.CONDICION_EGRESO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 18;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.OPORTUNIDAD_CITAS_DE_CONTROL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.OPORTUNIDAD_CITAS_DE_CONTROL = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 19;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.COSTOS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.COSTOS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 20;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.MES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.MES = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 21;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.IPS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 22;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.GRUPO_ETAREO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.GRUPO_ETAREO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 23;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.CURSO_DE_VIDA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.CURSO_DE_VIDA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 24;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.ANO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.ANO = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 25;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.DIA_SEMANA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.DIA_SEMANA = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 26;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.Codigo_Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.Codigo_Administradora = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 27;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.Administradora = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 28;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.Tipo_Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.Tipo_Administradora = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 29;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.Codigo_RIPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.Codigo_RIPS = null;

								}

								columnIndexWithD_tFileInputDelimited_1 = 30;

								if (columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length) {

									row3.Descripcion_RIPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];

								} else {

									row3.Descripcion_RIPS = null;

								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row3 = null;

							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tMap_2 main ] start
							 */

							currentComponent = "tMap_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1

										, "row3"

								);
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_2 = false;
							boolean mainRowRejected_tMap_2 = false;

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
								// ###############################
								// # Output tables

								salida = null;

// # Output table : 'salida'
								salida_tmp.FECHA_DE_ACCIDENTE = Tratamiento_de_datos
										.transformacion_fecha(row3.FECHA_DE_ACCIDENTE);
								salida_tmp.MES = row3.MES;
								salida_tmp.COSTOS = Tratamiento_de_datos.costos(row3.COSTOS);
								salida = salida_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_2 = false;

							tos_count_tMap_2++;

							/**
							 * [tMap_2 main ] stop
							 */

							/**
							 * [tMap_2 process_data_begin ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_begin ] stop
							 */
// Start of branch "salida"
							if (salida != null) {

								/**
								 * [tMap_1 main ] start
								 */

								currentComponent = "tMap_1";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1

											, "salida"

									);
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_1 = false;
								boolean mainRowRejected_tMap_1 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row1"
								///////////////////////////////////////////////

								boolean forceLooprow1 = false;

								row1Struct row1ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_1 = false;

									row1HashKey.FECHA_DE_ACCIDENTE = salida.FECHA_DE_ACCIDENTE == null ? null
											: new java.util.Date(salida.FECHA_DE_ACCIDENTE.getTime());

									row1HashKey.hashCodeDirty = true;

									tHash_Lookup_row1.lookup(row1HashKey);

									if (!tHash_Lookup_row1.hasNext()) { // G_TM_M_090

										rejectedInnerJoin_tMap_1 = true;

									} // G_TM_M_090

								} // G_TM_M_020

								if (tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1'
									// and it contains more one result from keys : row1.FECHA_DE_ACCIDENTE = '" +
									// row1HashKey.FECHA_DE_ACCIDENTE + "'");
								} // G 071

								row1Struct row1 = null;

								row1Struct fromLookup_row1 = null;
								row1 = row1Default;

								if (tHash_Lookup_row1 != null && tHash_Lookup_row1.hasNext()) { // G 099

									fromLookup_row1 = tHash_Lookup_row1.next();

								} // G 099

								if (fromLookup_row1 != null) {
									row1 = fromLookup_row1;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
									// ###############################
									// # Output tables

									promedio_edades = null;

									if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'promedio_edades'
										promedio_edades_tmp.ANO = row1.ANO;
										promedio_edades_tmp.MES = row1.MES;
										promedio_edades_tmp.COSTOS = salida.COSTOS;
										promedio_edades = promedio_edades_tmp;
									} // closing inner join bracket (2)
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_1 = false;

								tos_count_tMap_1++;

								/**
								 * [tMap_1 main ] stop
								 */

								/**
								 * [tMap_1 process_data_begin ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_begin ] stop
								 */
// Start of branch "promedio_edades"
								if (promedio_edades != null) {

									/**
									 * [tAggregateRow_1_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1

												, "promedio_edades"

										);
									}

									operation_finder_tAggregateRow_1.ANO = promedio_edades.ANO;
									operation_finder_tAggregateRow_1.MES = promedio_edades.MES;

									operation_finder_tAggregateRow_1.hashCodeDirty = true;

									operation_result_tAggregateRow_1 = hash_tAggregateRow_1
											.get(operation_finder_tAggregateRow_1);

									if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

										operation_result_tAggregateRow_1.ANO = operation_finder_tAggregateRow_1.ANO;
										operation_result_tAggregateRow_1.MES = operation_finder_tAggregateRow_1.MES;

										hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
												operation_result_tAggregateRow_1);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_1.COSTOS_sum == null) {
										operation_result_tAggregateRow_1.COSTOS_sum = (int) 0;
									}

									if (promedio_edades.COSTOS != null)
										operation_result_tAggregateRow_1.COSTOS_sum += promedio_edades.COSTOS;

									tos_count_tAggregateRow_1_AGGOUT++;

									/**
									 * [tAggregateRow_1_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] stop
									 */

								} // End of branch "promedio_edades"

								/**
								 * [tMap_1 process_data_end ] start
								 */

								currentComponent = "tMap_1";

								/**
								 * [tMap_1 process_data_end ] stop
								 */

							} // End of branch "salida"

							/**
							 * [tMap_2 process_data_end ] start
							 */

							currentComponent = "tMap_2";

							/**
							 * [tMap_2 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						nb_line_tFileInputDelimited_1++;
					}

				} finally {
					if (!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)) {
						if (csvReadertFileInputDelimited_1 != null) {
							csvReadertFileInputDelimited_1.close();
						}
					}
					if (csvReadertFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", nb_line_tFileInputDelimited_1);
					}

				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row1 != null) {
					tHash_Lookup_row1.endGet();
				}
				globalMap.remove("tHash_Lookup_row1");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "salida");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "promedio_edades");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tLogRow_1 = 0;

				///////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[3];

					public void addRow(String[] row) {

						for (int i = 0; i < 3; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i], row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 2 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 2 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(), (Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[2] - fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}

					public boolean isTableEmpty() {
						if (list.size() > 1)
							return false;
						return true;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "MES", "ANO", "COSTOS", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
///////////////////////    			

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row2.MES = aggregated_row_tAggregateRow_1.MES;

					row2.ANO = aggregated_row_tAggregateRow_1.ANO;
					row2.COSTOS = aggregated_row_tAggregateRow_1.COSTOS_sum;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1

								, "row2"

						);
					}

///////////////////////		

					String[] row_tLogRow_1 = new String[3];

					if (row2.MES != null) { //
						row_tLogRow_1[0] = String.valueOf(row2.MES);

					} //

					if (row2.ANO != null) { //
						row_tLogRow_1[1] = String.valueOf(row2.ANO);

					} //

					if (row2.COSTOS != null) { //
						row_tLogRow_1[2] = String.valueOf(row2.COSTOS);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
//////

//////                    

///////////////////////    			

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogRow_1 process_data_begin ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_begin ] stop
					 */

					/**
					 * [tLogRow_1 process_data_end ] start
					 */

					currentComponent = "tLogRow_1";

					/**
					 * [tLogRow_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

//////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
//////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

///////////////////////    			

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row1");

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_prueba_promedio = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public int ACCIDENTE_ID;

		public int getACCIDENTE_ID() {
			return this.ACCIDENTE_ID;
		}

		public String RELACION_USUARIO_ACCIDENTE;

		public String getRELACION_USUARIO_ACCIDENTE() {
			return this.RELACION_USUARIO_ACCIDENTE;
		}

		public java.util.Date FECHA_DE_ACCIDENTE;

		public java.util.Date getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String HORA_DE_ACCIDENTE;

		public String getHORA_DE_ACCIDENTE() {
			return this.HORA_DE_ACCIDENTE;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String ANO;

		public String getANO() {
			return this.ANO;
		}

		public String DIA_SEMANA;

		public String getDIA_SEMANA() {
			return this.DIA_SEMANA;
		}

		public String TIPO_DE_VEHICULO;

		public String getTIPO_DE_VEHICULO() {
			return this.TIPO_DE_VEHICULO;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.FECHA_DE_ACCIDENTE == null) ? 0 : this.FECHA_DE_ACCIDENTE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row1Struct other = (row1Struct) obj;

			if (this.FECHA_DE_ACCIDENTE == null) {
				if (other.FECHA_DE_ACCIDENTE != null)
					return false;

			} else if (!this.FECHA_DE_ACCIDENTE.equals(other.FECHA_DE_ACCIDENTE))

				return false;

			return true;
		}

		public void copyDataTo(row1Struct other) {

			other.ACCIDENTE_ID = this.ACCIDENTE_ID;
			other.RELACION_USUARIO_ACCIDENTE = this.RELACION_USUARIO_ACCIDENTE;
			other.FECHA_DE_ACCIDENTE = this.FECHA_DE_ACCIDENTE;
			other.HORA_DE_ACCIDENTE = this.HORA_DE_ACCIDENTE;
			other.MES = this.MES;
			other.ANO = this.ANO;
			other.DIA_SEMANA = this.DIA_SEMANA;
			other.TIPO_DE_VEHICULO = this.TIPO_DE_VEHICULO;

		}

		public void copyKeysDataTo(row1Struct other) {

			other.FECHA_DE_ACCIDENTE = this.FECHA_DE_ACCIDENTE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller)
				throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				unmarshaller.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller)
				throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = unmarshaller.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(unmarshaller.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (date1 == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.FECHA_DE_ACCIDENTE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_prueba_promedio) {

				try {

					int length = 0;

					this.FECHA_DE_ACCIDENTE = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.FECHA_DE_ACCIDENTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
			try {

				// java.util.Date

				writeDate(this.FECHA_DE_ACCIDENTE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.ACCIDENTE_ID = dis.readInt();

				this.RELACION_USUARIO_ACCIDENTE = readString(dis, ois);

				this.HORA_DE_ACCIDENTE = readString(dis, ois);

				this.MES = readString(dis, ois);

				this.ANO = readString(dis, ois);

				this.DIA_SEMANA = readString(dis, ois);

				this.TIPO_DE_VEHICULO = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
			try {
				int length = 0;

				this.ACCIDENTE_ID = objectIn.readInt();

				this.RELACION_USUARIO_ACCIDENTE = readString(dis, objectIn);

				this.HORA_DE_ACCIDENTE = readString(dis, objectIn);

				this.MES = readString(dis, objectIn);

				this.ANO = readString(dis, objectIn);

				this.DIA_SEMANA = readString(dis, objectIn);

				this.TIPO_DE_VEHICULO = readString(dis, objectIn);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				dos.writeInt(this.ACCIDENTE_ID);

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos, oos);

				writeString(this.HORA_DE_ACCIDENTE, dos, oos);

				writeString(this.MES, dos, oos);

				writeString(this.ANO, dos, oos);

				writeString(this.DIA_SEMANA, dos, oos);

				writeString(this.TIPO_DE_VEHICULO, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut) {
			try {

				objectOut.writeInt(this.ACCIDENTE_ID);

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos, objectOut);

				writeString(this.HORA_DE_ACCIDENTE, dos, objectOut);

				writeString(this.MES, dos, objectOut);

				writeString(this.ANO, dos, objectOut);

				writeString(this.DIA_SEMANA, dos, objectOut);

				writeString(this.TIPO_DE_VEHICULO, dos, objectOut);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}
		}

		public boolean supportMarshaller() {
			return true;
		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("ACCIDENTE_ID=" + String.valueOf(ACCIDENTE_ID));
			sb.append(",RELACION_USUARIO_ACCIDENTE=" + RELACION_USUARIO_ACCIDENTE);
			sb.append(",FECHA_DE_ACCIDENTE=" + String.valueOf(FECHA_DE_ACCIDENTE));
			sb.append(",HORA_DE_ACCIDENTE=" + HORA_DE_ACCIDENTE);
			sb.append(",MES=" + MES);
			sb.append(",ANO=" + ANO);
			sb.append(",DIA_SEMANA=" + DIA_SEMANA);
			sb.append(",TIPO_DE_VEHICULO=" + TIPO_DE_VEHICULO);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.FECHA_DE_ACCIDENTE, other.FECHA_DE_ACCIDENTE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();

				/**
				 * [tAdvancedHash_row1 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row1", false);
				start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tAdvancedHash_row1 = 0;

				// connection name:row1
				// source node:tDBInput_1 - inputs:(after_tFileInputDelimited_1)
				// outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1)
				// outputs:()
				// linked node: tMap_1 - inputs:(salida,row1) outputs:(promedio_edades)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row1Struct>getLookup(matchingModeEnum_row1);

				globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);

				/**
				 * [tAdvancedHash_row1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tDBInput_1);

				String url_tDBInput_1 = null;
				url_tDBInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + "localhost"
						+ ")(port=" + "1521" + "))(connect_data=(service_name=" + "" + ")))";

				String dbUser_tDBInput_1 = "costos";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:lBsvxIWQ1VpBQwJJArimYCcS1TXoRaqNNCBWtXdZw6dk0A==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);
				java.sql.Statement stmtGetTZ_tDBInput_1 = conn_tDBInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tDBInput_1 = stmtGetTZ_tDBInput_1
						.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tDBInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tDBInput_1.next()) {
					sessionTimezone_tDBInput_1 = rsGetTZ_tDBInput_1.getString(1);
				}
				if (!(conn_tDBInput_1 instanceof oracle.jdbc.OracleConnection)
						&& conn_tDBInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
					if (conn_tDBInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
						((oracle.jdbc.OracleConnection) conn_tDBInput_1.unwrap(oracle.jdbc.OracleConnection.class))
								.setSessionTimeZone(sessionTimezone_tDBInput_1);
					}
				} else {
					((oracle.jdbc.OracleConnection) conn_tDBInput_1).setSessionTimeZone(sessionTimezone_tDBInput_1);
				}

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "SELECT \n  COSTOS.DIM_ACCIDENTE.ACCIDENTE_ID, \n  COSTOS.DIM_ACCIDENTE.RELACION_USUARIO_ACCIDENTE, \n  COSTOS.DIM_ACCIDENT"
						+ "E.FECHA_DE_ACCIDENTE, \n  COSTOS.DIM_ACCIDENTE.HORA_DE_ACCIDENTE, \n  COSTOS.DIM_ACCIDENTE.MES, \n  COSTOS.DIM_ACCIDENTE.AN"
						+ "O, \n  COSTOS.DIM_ACCIDENTE.DIA_SEMANA, \n  COSTOS.DIM_ACCIDENTE.TIPO_DE_VEHICULO\nFROM COSTOS.DIM_ACCIDENTE";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.ACCIDENTE_ID = 0;
						} else {

							if (rs_tDBInput_1.getObject(1) != null) {
								row1.ACCIDENTE_ID = rs_tDBInput_1.getInt(1);
							} else {

								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.RELACION_USUARIO_ACCIDENTE = null;
						} else {

							row1.RELACION_USUARIO_ACCIDENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 2,
									false);
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.FECHA_DE_ACCIDENTE = null;
						} else {

							row1.FECHA_DE_ACCIDENTE = routines.system.JDBCUtil.getDate(rs_tDBInput_1, 3);
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.HORA_DE_ACCIDENTE = null;
						} else {

							row1.HORA_DE_ACCIDENTE = routines.system.JDBCUtil.getString(rs_tDBInput_1, 4, false);
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.MES = null;
						} else {

							row1.MES = routines.system.JDBCUtil.getString(rs_tDBInput_1, 5, false);
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.ANO = null;
						} else {

							row1.ANO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 6, false);
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.DIA_SEMANA = null;
						} else {

							row1.DIA_SEMANA = routines.system.JDBCUtil.getString(rs_tDBInput_1, 7, false);
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.TIPO_DE_VEHICULO = null;
						} else {

							row1.TIPO_DE_VEHICULO = routines.system.JDBCUtil.getString(rs_tDBInput_1, 8, false);
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 main ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1

									, "row1"

							);
						}

						row1Struct row1_HashRow = new row1Struct();

						row1_HashRow.ACCIDENTE_ID = row1.ACCIDENTE_ID;

						row1_HashRow.RELACION_USUARIO_ACCIDENTE = row1.RELACION_USUARIO_ACCIDENTE;

						row1_HashRow.FECHA_DE_ACCIDENTE = row1.FECHA_DE_ACCIDENTE;

						row1_HashRow.HORA_DE_ACCIDENTE = row1.HORA_DE_ACCIDENTE;

						row1_HashRow.MES = row1.MES;

						row1_HashRow.ANO = row1.ANO;

						row1_HashRow.DIA_SEMANA = row1.DIA_SEMANA;

						row1_HashRow.TIPO_DE_VEHICULO = row1.TIPO_DE_VEHICULO;

						tHash_Lookup_row1.put(row1_HashRow);

						tos_count_tAdvancedHash_row1++;

						/**
						 * [tAdvancedHash_row1 main ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row1 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row1";

						/**
						 * [tAdvancedHash_row1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}

				}

				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row1 end ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				tHash_Lookup_row1.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tAdvancedHash_row1", true);
				end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row1 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row1 finally ] start
				 */

				currentComponent = "tAdvancedHash_row1";

				/**
				 * [tAdvancedHash_row1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final prueba_promedio prueba_promedioClass = new prueba_promedio();

		int exitCode = prueba_promedioClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = prueba_promedio.class.getClassLoader().getResourceAsStream(
					"costoshospitalaria/prueba_promedio_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = prueba_promedio.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : prueba_promedio");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 173860 characters generated by Talend Open Studio for Data Integration on the
 * 28 de junio de 2022, 12:29:00 COT
 ************************************************************************************************/