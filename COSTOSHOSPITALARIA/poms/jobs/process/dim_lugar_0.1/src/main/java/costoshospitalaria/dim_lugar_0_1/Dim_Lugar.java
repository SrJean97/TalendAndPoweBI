// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package costoshospitalaria.dim_lugar_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Dim_Lugar Purpose: Dim_Lugar<br>
 * Description: Creación dimensión lugar <br>
 * 
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status
 */
public class Dim_Lugar implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

		// if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if (NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Dim_Lugar";
	private final String projectName = "COSTOSHOSPITALARIA";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	public void setDataSourceReferences(List serviceReferences) throws Exception {

		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();

		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils
				.getServices(serviceReferences, javax.sql.DataSource.class).entrySet()) {
			dataSources.put(entry.getKey(), entry.getValue());
			talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Dim_Lugar.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Dim_Lugar.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class salidaDatosCorrectosStruct
			implements routines.system.IPersistableRow<salidaDatosCorrectosStruct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[0];

		public Integer Numero;

		public Integer getNumero() {
			return this.Numero;
		}

		public String EDAD;

		public String getEDAD() {
			return this.EDAD;
		}

		public String SEXO;

		public String getSEXO() {
			return this.SEXO;
		}

		public String TIPO_DE_VEHICULO;

		public String getTIPO_DE_VEHICULO() {
			return this.TIPO_DE_VEHICULO;
		}

		public String RELACION_USUARIO_ACCIDENTE;

		public String getRELACION_USUARIO_ACCIDENTE() {
			return this.RELACION_USUARIO_ACCIDENTE;
		}

		public String FECHA_DE_ACCIDENTE;

		public String getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String FECHA_DE_INGRESO_IPS;

		public String getFECHA_DE_INGRESO_IPS() {
			return this.FECHA_DE_INGRESO_IPS;
		}

		public String HORA_DE_ACCIDENTE;

		public String getHORA_DE_ACCIDENTE() {
			return this.HORA_DE_ACCIDENTE;
		}

		public String HORA_DE_INGRESO_IPS;

		public String getHORA_DE_INGRESO_IPS() {
			return this.HORA_DE_INGRESO_IPS;
		}

		public String FECHA_DE__ATENCION_MEDICA;

		public String getFECHA_DE__ATENCION_MEDICA() {
			return this.FECHA_DE__ATENCION_MEDICA;
		}

		public String HORA_DE_ATENCION_MEDICA;

		public String getHORA_DE_ATENCION_MEDICA() {
			return this.HORA_DE_ATENCION_MEDICA;
		}

		public String OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS;

		public String getOPORTUNIDAD_DE_LA_ATENCION_EN_HORAS() {
			return this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS;
		}

		public String OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS;

		public String getOPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS() {
			return this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS;
		}

		public String REQUERIMIENTO_DE_CX;

		public String getREQUERIMIENTO_DE_CX() {
			return this.REQUERIMIENTO_DE_CX;
		}

		public String REFERIDO_A_OTRA_IPS;

		public String getREFERIDO_A_OTRA_IPS() {
			return this.REFERIDO_A_OTRA_IPS;
		}

		public String REGION_ANATOMICA_MAS_AFECTADA;

		public String getREGION_ANATOMICA_MAS_AFECTADA() {
			return this.REGION_ANATOMICA_MAS_AFECTADA;
		}

		public String POLITRAUMATISMO;

		public String getPOLITRAUMATISMO() {
			return this.POLITRAUMATISMO;
		}

		public String TIPO_AFILIACION;

		public String getTIPO_AFILIACION() {
			return this.TIPO_AFILIACION;
		}

		public String EPS_USUARIO;

		public String getEPS_USUARIO() {
			return this.EPS_USUARIO;
		}

		public String CONDICION_EGRESO;

		public String getCONDICION_EGRESO() {
			return this.CONDICION_EGRESO;
		}

		public String OPORTUNIDAD_CITAS_DE_CONTROL;

		public String getOPORTUNIDAD_CITAS_DE_CONTROL() {
			return this.OPORTUNIDAD_CITAS_DE_CONTROL;
		}

		public String COSTOS;

		public String getCOSTOS() {
			return this.COSTOS;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String IPS;

		public String getIPS() {
			return this.IPS;
		}

		public String GRUPO_ETAREO;

		public String getGRUPO_ETAREO() {
			return this.GRUPO_ETAREO;
		}

		public String CURSO_DE_VIDA;

		public String getCURSO_DE_VIDA() {
			return this.CURSO_DE_VIDA;
		}

		public Integer ANO;

		public Integer getANO() {
			return this.ANO;
		}

		public String DIA_SEMANA;

		public String getDIA_SEMANA() {
			return this.DIA_SEMANA;
		}

		public String Codigo_Administradora;

		public String getCodigo_Administradora() {
			return this.Codigo_Administradora;
		}

		public String Administradora;

		public String getAdministradora() {
			return this.Administradora;
		}

		public String Tipo_Administradora;

		public String getTipo_Administradora() {
			return this.Tipo_Administradora;
		}

		public String Coigo_RIPS;

		public String getCoigo_RIPS() {
			return this.Coigo_RIPS;
		}

		public String Descripcion_RIPS;

		public String getDescripcion_RIPS() {
			return this.Descripcion_RIPS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readInteger(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Coigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readInteger(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Coigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// Integer

				writeInteger(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Coigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// Integer

				writeInteger(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Coigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero=" + String.valueOf(Numero));
			sb.append(",EDAD=" + EDAD);
			sb.append(",SEXO=" + SEXO);
			sb.append(",TIPO_DE_VEHICULO=" + TIPO_DE_VEHICULO);
			sb.append(",RELACION_USUARIO_ACCIDENTE=" + RELACION_USUARIO_ACCIDENTE);
			sb.append(",FECHA_DE_ACCIDENTE=" + FECHA_DE_ACCIDENTE);
			sb.append(",FECHA_DE_INGRESO_IPS=" + FECHA_DE_INGRESO_IPS);
			sb.append(",HORA_DE_ACCIDENTE=" + HORA_DE_ACCIDENTE);
			sb.append(",HORA_DE_INGRESO_IPS=" + HORA_DE_INGRESO_IPS);
			sb.append(",FECHA_DE__ATENCION_MEDICA=" + FECHA_DE__ATENCION_MEDICA);
			sb.append(",HORA_DE_ATENCION_MEDICA=" + HORA_DE_ATENCION_MEDICA);
			sb.append(",OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS=" + OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS);
			sb.append(",OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS=" + OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS);
			sb.append(",REQUERIMIENTO_DE_CX=" + REQUERIMIENTO_DE_CX);
			sb.append(",REFERIDO_A_OTRA_IPS=" + REFERIDO_A_OTRA_IPS);
			sb.append(",REGION_ANATOMICA_MAS_AFECTADA=" + REGION_ANATOMICA_MAS_AFECTADA);
			sb.append(",POLITRAUMATISMO=" + POLITRAUMATISMO);
			sb.append(",TIPO_AFILIACION=" + TIPO_AFILIACION);
			sb.append(",EPS_USUARIO=" + EPS_USUARIO);
			sb.append(",CONDICION_EGRESO=" + CONDICION_EGRESO);
			sb.append(",OPORTUNIDAD_CITAS_DE_CONTROL=" + OPORTUNIDAD_CITAS_DE_CONTROL);
			sb.append(",COSTOS=" + COSTOS);
			sb.append(",MES=" + MES);
			sb.append(",IPS=" + IPS);
			sb.append(",GRUPO_ETAREO=" + GRUPO_ETAREO);
			sb.append(",CURSO_DE_VIDA=" + CURSO_DE_VIDA);
			sb.append(",ANO=" + String.valueOf(ANO));
			sb.append(",DIA_SEMANA=" + DIA_SEMANA);
			sb.append(",Codigo_Administradora=" + Codigo_Administradora);
			sb.append(",Administradora=" + Administradora);
			sb.append(",Tipo_Administradora=" + Tipo_Administradora);
			sb.append(",Coigo_RIPS=" + Coigo_RIPS);
			sb.append(",Descripcion_RIPS=" + Descripcion_RIPS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(salidaDatosCorrectosStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar = new byte[0];
		static byte[] commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[0];

		public Integer Numero;

		public Integer getNumero() {
			return this.Numero;
		}

		public String EDAD;

		public String getEDAD() {
			return this.EDAD;
		}

		public String SEXO;

		public String getSEXO() {
			return this.SEXO;
		}

		public String TIPO_DE_VEHICULO;

		public String getTIPO_DE_VEHICULO() {
			return this.TIPO_DE_VEHICULO;
		}

		public String RELACION_USUARIO_ACCIDENTE;

		public String getRELACION_USUARIO_ACCIDENTE() {
			return this.RELACION_USUARIO_ACCIDENTE;
		}

		public String FECHA_DE_ACCIDENTE;

		public String getFECHA_DE_ACCIDENTE() {
			return this.FECHA_DE_ACCIDENTE;
		}

		public String FECHA_DE_INGRESO_IPS;

		public String getFECHA_DE_INGRESO_IPS() {
			return this.FECHA_DE_INGRESO_IPS;
		}

		public String HORA_DE_ACCIDENTE;

		public String getHORA_DE_ACCIDENTE() {
			return this.HORA_DE_ACCIDENTE;
		}

		public String HORA_DE_INGRESO_IPS;

		public String getHORA_DE_INGRESO_IPS() {
			return this.HORA_DE_INGRESO_IPS;
		}

		public String FECHA_DE__ATENCION_MEDICA;

		public String getFECHA_DE__ATENCION_MEDICA() {
			return this.FECHA_DE__ATENCION_MEDICA;
		}

		public String HORA_DE_ATENCION_MEDICA;

		public String getHORA_DE_ATENCION_MEDICA() {
			return this.HORA_DE_ATENCION_MEDICA;
		}

		public String OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS;

		public String getOPORTUNIDAD_DE_LA_ATENCION_EN_HORAS() {
			return this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS;
		}

		public String OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS;

		public String getOPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS() {
			return this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS;
		}

		public String REQUERIMIENTO_DE_CX;

		public String getREQUERIMIENTO_DE_CX() {
			return this.REQUERIMIENTO_DE_CX;
		}

		public String REFERIDO_A_OTRA_IPS;

		public String getREFERIDO_A_OTRA_IPS() {
			return this.REFERIDO_A_OTRA_IPS;
		}

		public String REGION_ANATOMICA_MAS_AFECTADA;

		public String getREGION_ANATOMICA_MAS_AFECTADA() {
			return this.REGION_ANATOMICA_MAS_AFECTADA;
		}

		public String POLITRAUMATISMO;

		public String getPOLITRAUMATISMO() {
			return this.POLITRAUMATISMO;
		}

		public String TIPO_AFILIACION;

		public String getTIPO_AFILIACION() {
			return this.TIPO_AFILIACION;
		}

		public String EPS_USUARIO;

		public String getEPS_USUARIO() {
			return this.EPS_USUARIO;
		}

		public String CONDICION_EGRESO;

		public String getCONDICION_EGRESO() {
			return this.CONDICION_EGRESO;
		}

		public String OPORTUNIDAD_CITAS_DE_CONTROL;

		public String getOPORTUNIDAD_CITAS_DE_CONTROL() {
			return this.OPORTUNIDAD_CITAS_DE_CONTROL;
		}

		public String COSTOS;

		public String getCOSTOS() {
			return this.COSTOS;
		}

		public String MES;

		public String getMES() {
			return this.MES;
		}

		public String IPS;

		public String getIPS() {
			return this.IPS;
		}

		public String GRUPO_ETAREO;

		public String getGRUPO_ETAREO() {
			return this.GRUPO_ETAREO;
		}

		public String CURSO_DE_VIDA;

		public String getCURSO_DE_VIDA() {
			return this.CURSO_DE_VIDA;
		}

		public Integer ANO;

		public Integer getANO() {
			return this.ANO;
		}

		public String DIA_SEMANA;

		public String getDIA_SEMANA() {
			return this.DIA_SEMANA;
		}

		public String Codigo_Administradora;

		public String getCodigo_Administradora() {
			return this.Codigo_Administradora;
		}

		public String Administradora;

		public String getAdministradora() {
			return this.Administradora;
		}

		public String Tipo_Administradora;

		public String getTipo_Administradora() {
			return this.Tipo_Administradora;
		}

		public String Coigo_RIPS;

		public String getCoigo_RIPS() {
			return this.Coigo_RIPS;
		}

		public String Descripcion_RIPS;

		public String getDescripcion_RIPS() {
			return this.Descripcion_RIPS;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (intNum == null) {
				marshaller.writeByte(-1);
			} else {
				marshaller.writeByte(0);
				marshaller.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException {
			String strReturn = null;
			int length = 0;
			length = unmarshaller.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length) {
					if (length < 1024 && commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar.length == 0) {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[1024];
					} else {
						commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar = new byte[2 * length];
					}
				}
				unmarshaller.readFully(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length);
				strReturn = new String(commonByteArray_COSTOSHOSPITALARIA_Dim_Lugar, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException {
			if (str == null) {
				marshaller.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				marshaller.writeInt(byteArray.length);
				marshaller.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readInteger(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Coigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void readData(org.jboss.marshalling.Unmarshaller dis) {

			synchronized (commonByteArrayLock_COSTOSHOSPITALARIA_Dim_Lugar) {

				try {

					int length = 0;

					this.Numero = readInteger(dis);

					this.EDAD = readString(dis);

					this.SEXO = readString(dis);

					this.TIPO_DE_VEHICULO = readString(dis);

					this.RELACION_USUARIO_ACCIDENTE = readString(dis);

					this.FECHA_DE_ACCIDENTE = readString(dis);

					this.FECHA_DE_INGRESO_IPS = readString(dis);

					this.HORA_DE_ACCIDENTE = readString(dis);

					this.HORA_DE_INGRESO_IPS = readString(dis);

					this.FECHA_DE__ATENCION_MEDICA = readString(dis);

					this.HORA_DE_ATENCION_MEDICA = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = readString(dis);

					this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = readString(dis);

					this.REQUERIMIENTO_DE_CX = readString(dis);

					this.REFERIDO_A_OTRA_IPS = readString(dis);

					this.REGION_ANATOMICA_MAS_AFECTADA = readString(dis);

					this.POLITRAUMATISMO = readString(dis);

					this.TIPO_AFILIACION = readString(dis);

					this.EPS_USUARIO = readString(dis);

					this.CONDICION_EGRESO = readString(dis);

					this.OPORTUNIDAD_CITAS_DE_CONTROL = readString(dis);

					this.COSTOS = readString(dis);

					this.MES = readString(dis);

					this.IPS = readString(dis);

					this.GRUPO_ETAREO = readString(dis);

					this.CURSO_DE_VIDA = readString(dis);

					this.ANO = readInteger(dis);

					this.DIA_SEMANA = readString(dis);

					this.Codigo_Administradora = readString(dis);

					this.Administradora = readString(dis);

					this.Tipo_Administradora = readString(dis);

					this.Coigo_RIPS = readString(dis);

					this.Descripcion_RIPS = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// Integer

				writeInteger(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Coigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public void writeData(org.jboss.marshalling.Marshaller dos) {
			try {

				// Integer

				writeInteger(this.Numero, dos);

				// String

				writeString(this.EDAD, dos);

				// String

				writeString(this.SEXO, dos);

				// String

				writeString(this.TIPO_DE_VEHICULO, dos);

				// String

				writeString(this.RELACION_USUARIO_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_ACCIDENTE, dos);

				// String

				writeString(this.FECHA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.HORA_DE_ACCIDENTE, dos);

				// String

				writeString(this.HORA_DE_INGRESO_IPS, dos);

				// String

				writeString(this.FECHA_DE__ATENCION_MEDICA, dos);

				// String

				writeString(this.HORA_DE_ATENCION_MEDICA, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS, dos);

				// String

				writeString(this.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS, dos);

				// String

				writeString(this.REQUERIMIENTO_DE_CX, dos);

				// String

				writeString(this.REFERIDO_A_OTRA_IPS, dos);

				// String

				writeString(this.REGION_ANATOMICA_MAS_AFECTADA, dos);

				// String

				writeString(this.POLITRAUMATISMO, dos);

				// String

				writeString(this.TIPO_AFILIACION, dos);

				// String

				writeString(this.EPS_USUARIO, dos);

				// String

				writeString(this.CONDICION_EGRESO, dos);

				// String

				writeString(this.OPORTUNIDAD_CITAS_DE_CONTROL, dos);

				// String

				writeString(this.COSTOS, dos);

				// String

				writeString(this.MES, dos);

				// String

				writeString(this.IPS, dos);

				// String

				writeString(this.GRUPO_ETAREO, dos);

				// String

				writeString(this.CURSO_DE_VIDA, dos);

				// Integer

				writeInteger(this.ANO, dos);

				// String

				writeString(this.DIA_SEMANA, dos);

				// String

				writeString(this.Codigo_Administradora, dos);

				// String

				writeString(this.Administradora, dos);

				// String

				writeString(this.Tipo_Administradora, dos);

				// String

				writeString(this.Coigo_RIPS, dos);

				// String

				writeString(this.Descripcion_RIPS, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Numero=" + String.valueOf(Numero));
			sb.append(",EDAD=" + EDAD);
			sb.append(",SEXO=" + SEXO);
			sb.append(",TIPO_DE_VEHICULO=" + TIPO_DE_VEHICULO);
			sb.append(",RELACION_USUARIO_ACCIDENTE=" + RELACION_USUARIO_ACCIDENTE);
			sb.append(",FECHA_DE_ACCIDENTE=" + FECHA_DE_ACCIDENTE);
			sb.append(",FECHA_DE_INGRESO_IPS=" + FECHA_DE_INGRESO_IPS);
			sb.append(",HORA_DE_ACCIDENTE=" + HORA_DE_ACCIDENTE);
			sb.append(",HORA_DE_INGRESO_IPS=" + HORA_DE_INGRESO_IPS);
			sb.append(",FECHA_DE__ATENCION_MEDICA=" + FECHA_DE__ATENCION_MEDICA);
			sb.append(",HORA_DE_ATENCION_MEDICA=" + HORA_DE_ATENCION_MEDICA);
			sb.append(",OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS=" + OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS);
			sb.append(",OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS=" + OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS);
			sb.append(",REQUERIMIENTO_DE_CX=" + REQUERIMIENTO_DE_CX);
			sb.append(",REFERIDO_A_OTRA_IPS=" + REFERIDO_A_OTRA_IPS);
			sb.append(",REGION_ANATOMICA_MAS_AFECTADA=" + REGION_ANATOMICA_MAS_AFECTADA);
			sb.append(",POLITRAUMATISMO=" + POLITRAUMATISMO);
			sb.append(",TIPO_AFILIACION=" + TIPO_AFILIACION);
			sb.append(",EPS_USUARIO=" + EPS_USUARIO);
			sb.append(",CONDICION_EGRESO=" + CONDICION_EGRESO);
			sb.append(",OPORTUNIDAD_CITAS_DE_CONTROL=" + OPORTUNIDAD_CITAS_DE_CONTROL);
			sb.append(",COSTOS=" + COSTOS);
			sb.append(",MES=" + MES);
			sb.append(",IPS=" + IPS);
			sb.append(",GRUPO_ETAREO=" + GRUPO_ETAREO);
			sb.append(",CURSO_DE_VIDA=" + CURSO_DE_VIDA);
			sb.append(",ANO=" + String.valueOf(ANO));
			sb.append(",DIA_SEMANA=" + DIA_SEMANA);
			sb.append(",Codigo_Administradora=" + Codigo_Administradora);
			sb.append(",Administradora=" + Administradora);
			sb.append(",Tipo_Administradora=" + Tipo_Administradora);
			sb.append(",Coigo_RIPS=" + Coigo_RIPS);
			sb.append(",Descripcion_RIPS=" + Descripcion_RIPS);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
salidaDatosCorrectosStruct salidaDatosCorrectos = new salidaDatosCorrectosStruct();





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"salidaDatosCorrectos");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
         class Util_tLogRow_1 {

        String[] des_top = { ".", ".", "-", "+" };

        String[] des_head = { "|=", "=|", "-", "+" };

        String[] des_bottom = { "'", "'", "-", "+" };

        String name="";

        java.util.List<String[]> list = new java.util.ArrayList<String[]>();

        int[] colLengths = new int[33];

        public void addRow(String[] row) {

            for (int i = 0; i < 33; i++) {
                if (row[i]!=null) {
                  colLengths[i] = Math.max(colLengths[i], row[i].length());
                }
            }
            list.add(row);
        }

        public void setTableName(String name) {

            this.name = name;
        }

            public StringBuilder format() {
            
                StringBuilder sb = new StringBuilder();
  
            
                    sb.append(print(des_top));
    
                    int totals = 0;
                    for (int i = 0; i < colLengths.length; i++) {
                        totals = totals + colLengths[i];
                    }
    
                    // name
                    sb.append("|");
                    int k = 0;
                    for (k = 0; k < (totals + 32 - name.length()) / 2; k++) {
                        sb.append(' ');
                    }
                    sb.append(name);
                    for (int i = 0; i < totals + 32 - name.length() - k; i++) {
                        sb.append(' ');
                    }
                    sb.append("|\n");

                    // head and rows
                    sb.append(print(des_head));
                    for (int i = 0; i < list.size(); i++) {
    
                        String[] row = list.get(i);
    
                        java.util.Formatter formatter = new java.util.Formatter(new StringBuilder());
                        
                        StringBuilder sbformat = new StringBuilder();                                             
        			        sbformat.append("|%1$-");
        			        sbformat.append(colLengths[0]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%2$-");
        			        sbformat.append(colLengths[1]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%3$-");
        			        sbformat.append(colLengths[2]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%4$-");
        			        sbformat.append(colLengths[3]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%5$-");
        			        sbformat.append(colLengths[4]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%6$-");
        			        sbformat.append(colLengths[5]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%7$-");
        			        sbformat.append(colLengths[6]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%8$-");
        			        sbformat.append(colLengths[7]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%9$-");
        			        sbformat.append(colLengths[8]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%10$-");
        			        sbformat.append(colLengths[9]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%11$-");
        			        sbformat.append(colLengths[10]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%12$-");
        			        sbformat.append(colLengths[11]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%13$-");
        			        sbformat.append(colLengths[12]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%14$-");
        			        sbformat.append(colLengths[13]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%15$-");
        			        sbformat.append(colLengths[14]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%16$-");
        			        sbformat.append(colLengths[15]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%17$-");
        			        sbformat.append(colLengths[16]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%18$-");
        			        sbformat.append(colLengths[17]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%19$-");
        			        sbformat.append(colLengths[18]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%20$-");
        			        sbformat.append(colLengths[19]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%21$-");
        			        sbformat.append(colLengths[20]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%22$-");
        			        sbformat.append(colLengths[21]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%23$-");
        			        sbformat.append(colLengths[22]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%24$-");
        			        sbformat.append(colLengths[23]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%25$-");
        			        sbformat.append(colLengths[24]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%26$-");
        			        sbformat.append(colLengths[25]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%27$-");
        			        sbformat.append(colLengths[26]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%28$-");
        			        sbformat.append(colLengths[27]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%29$-");
        			        sbformat.append(colLengths[28]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%30$-");
        			        sbformat.append(colLengths[29]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%31$-");
        			        sbformat.append(colLengths[30]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%32$-");
        			        sbformat.append(colLengths[31]);
        			        sbformat.append("s");
        			              
        			        sbformat.append("|%33$-");
        			        sbformat.append(colLengths[32]);
        			        sbformat.append("s");
        			                      
                        sbformat.append("|\n");                    
       
                        formatter.format(sbformat.toString(), (Object[])row);	
                                
                        sb.append(formatter.toString());
                        if (i == 0)
                            sb.append(print(des_head)); // print the head
                    }
    
                    // end
                    sb.append(print(des_bottom));
                    return sb;
                }
            

            private StringBuilder print(String[] fillChars) {
                StringBuilder sb = new StringBuilder();
                //first column
                sb.append(fillChars[0]);                
                    for (int i = 0; i < colLengths[0] - fillChars[0].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);	                

                    for (int i = 0; i < colLengths[1] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[2] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[3] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[4] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[5] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[6] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[7] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[8] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[9] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[10] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[11] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[12] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[13] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[14] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[15] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[16] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[17] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[18] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[19] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[20] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[21] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[22] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[23] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[24] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[25] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[26] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[27] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[28] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[29] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[30] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                    for (int i = 0; i < colLengths[31] - fillChars[3].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }
                    sb.append(fillChars[3]);
                
                    //last column
                    for (int i = 0; i < colLengths[32] - fillChars[1].length() + 1; i++) {
                        sb.append(fillChars[2]);
                    }         
                sb.append(fillChars[1]);
                sb.append("\n");               
                return sb;
            }
            
            public boolean isTableEmpty(){
            	if (list.size() > 1)
            		return false;
            	return true;
            }
        }
        Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
        util_tLogRow_1.setTableName("tLogRow_1");
        util_tLogRow_1.addRow(new String[]{"Numero","EDAD","SEXO","TIPO_DE_VEHICULO","RELACION_USUARIO_ACCIDENTE","FECHA_DE_ACCIDENTE","FECHA_DE_INGRESO_IPS","HORA_DE_ACCIDENTE","HORA_DE_INGRESO_IPS","FECHA_DE__ATENCION_MEDICA","HORA_DE_ATENCION_MEDICA","OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS","OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS","REQUERIMIENTO_DE_CX","REFERIDO_A_OTRA_IPS","REGION_ANATOMICA_MAS_AFECTADA","POLITRAUMATISMO","TIPO_AFILIACION","EPS_USUARIO","CONDICION_EGRESO","OPORTUNIDAD_CITAS_DE_CONTROL","COSTOS","MES","IPS","GRUPO_ETAREO","CURSO_DE_VIDA","ANO","DIA_SEMANA","Codigo_Administradora","Administradora","Tipo_Administradora","Coigo_RIPS","Descripcion_RIPS",});        
 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
salidaDatosCorrectosStruct salidaDatosCorrectos_tmp = new salidaDatosCorrectosStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				int footer_tFileInputDelimited_1 = 0;
				int totalLinetFileInputDelimited_1 = 0;
				int limittFileInputDelimited_1 = -1;
				int lastLinetFileInputDelimited_1 = -1;	
				
				char fieldSeparator_tFileInputDelimited_1[] = null;
				
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1 = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
			
				char rowSeparator_tFileInputDelimited_1[] = null;
			
				//support passing value (property: Row Separator) by 'context.rs' or 'globalMap.get("rs")'. 
				if ( ((String)"\n").length() > 0 ){
					rowSeparator_tFileInputDelimited_1 = ((String)"\n").toCharArray();
				}else {
					throw new IllegalArgumentException("Row Separator must be assigned a char."); 
				}
			
				Object filename_tFileInputDelimited_1 = /** Start field tFileInputDelimited_1:FILENAME */"D:/Documentos/2022/Documentos/2022-1 Universidad/5. Base de datos avanzada/Documentos/costos_atencion_hospitalaria_bucaramanga.csv"/** End field tFileInputDelimited_1:FILENAME */;		
				com.talend.csv.CSVReader csvReadertFileInputDelimited_1 = null;
	
				try{
					
						String[] rowtFileInputDelimited_1=null;
						int currentLinetFileInputDelimited_1 = 0;
	        			int outputLinetFileInputDelimited_1 = 0;
						try {//TD110 begin
							if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0;
			if(footer_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer shouldn't be bigger than 0.");
			}
		
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
							}else{
								csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        			}
					
					
					csvReadertFileInputDelimited_1.setTrimWhitespace(false);
					if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )
	        			csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
	        				csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	            				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							      
		
			
						if(footer_tFileInputDelimited_1 > 0){
						for(totalLinetFileInputDelimited_1=0;totalLinetFileInputDelimited_1 < 1; totalLinetFileInputDelimited_1++){
							csvReadertFileInputDelimited_1.readNext();
						}
						csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
			            while (csvReadertFileInputDelimited_1.readNext()) {
							
	                
	                		totalLinetFileInputDelimited_1++;
	                
							
	                
			            }
	            		int lastLineTemptFileInputDelimited_1 = totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1   < 0? 0 : totalLinetFileInputDelimited_1 - footer_tFileInputDelimited_1 ;
	            		if(lastLinetFileInputDelimited_1 > 0){
	                		lastLinetFileInputDelimited_1 = lastLinetFileInputDelimited_1 < lastLineTemptFileInputDelimited_1 ? lastLinetFileInputDelimited_1 : lastLineTemptFileInputDelimited_1; 
	            		}else {
	                		lastLinetFileInputDelimited_1 = lastLineTemptFileInputDelimited_1;
	            		}
	         
			          	csvReadertFileInputDelimited_1.close();
				        if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
				 			csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader((java.io.InputStream)filename_tFileInputDelimited_1, fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
		        		}else{
							csvReadertFileInputDelimited_1=new com.talend.csv.CSVReader(String.valueOf(filename_tFileInputDelimited_1),fieldSeparator_tFileInputDelimited_1[0], "UTF-8");
						}
						csvReadertFileInputDelimited_1.setTrimWhitespace(false);
						if ( (rowSeparator_tFileInputDelimited_1[0] != '\n') && (rowSeparator_tFileInputDelimited_1[0] != '\r') )	
	        				csvReadertFileInputDelimited_1.setLineEnd(""+rowSeparator_tFileInputDelimited_1[0]);
						
							csvReadertFileInputDelimited_1.setQuoteChar('"');
						
	        				csvReadertFileInputDelimited_1.setEscapeChar(csvReadertFileInputDelimited_1.getQuoteChar());
							  
	        		}
	        
			        if(limittFileInputDelimited_1 != 0){
			        	for(currentLinetFileInputDelimited_1=0;currentLinetFileInputDelimited_1 < 1;currentLinetFileInputDelimited_1++){
			        		csvReadertFileInputDelimited_1.readNext();
			        	}
			        }
			        csvReadertFileInputDelimited_1.setSkipEmptyRecords(false);
	        
	    		} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
					
						
						System.err.println(e.getMessage());
					
	    		}//TD110 end
	        
			    
	        	while ( limittFileInputDelimited_1 != 0 && csvReadertFileInputDelimited_1!=null && csvReadertFileInputDelimited_1.readNext() ) { 
	        		rowstate_tFileInputDelimited_1.reset();
	        
		        	rowtFileInputDelimited_1=csvReadertFileInputDelimited_1.getValues();
		        	
					
	        	
	        	
	        		currentLinetFileInputDelimited_1++;
	            
		            if(lastLinetFileInputDelimited_1 > -1 && currentLinetFileInputDelimited_1 > lastLinetFileInputDelimited_1) {
		                break;
	    	        }
	        	    outputLinetFileInputDelimited_1++;
	            	if (limittFileInputDelimited_1 > 0 && outputLinetFileInputDelimited_1 > limittFileInputDelimited_1) {
	                	break;
	            	}  
	                                                                      
					
	    							row1 = null;			
								
								boolean whetherReject_tFileInputDelimited_1 = false;
								row1 = new row1Struct();
								try {			
									
				char fieldSeparator_tFileInputDelimited_1_ListType[] = null;
				//support passing value (property: Field Separator) by 'context.fs' or 'globalMap.get("fs")'. 
				if ( ((String)",").length() > 0 ){
					fieldSeparator_tFileInputDelimited_1_ListType = ((String)",").toCharArray();
				}else {			
					throw new IllegalArgumentException("Field Separator must be assigned a char."); 
				}
				if(rowtFileInputDelimited_1.length == 1 && ("\015").equals(rowtFileInputDelimited_1[0])){//empty line when row separator is '\n'
					
							row1.Numero = null;
					
							row1.EDAD = null;
					
							row1.SEXO = null;
					
							row1.TIPO_DE_VEHICULO = null;
					
							row1.RELACION_USUARIO_ACCIDENTE = null;
					
							row1.FECHA_DE_ACCIDENTE = null;
					
							row1.FECHA_DE_INGRESO_IPS = null;
					
							row1.HORA_DE_ACCIDENTE = null;
					
							row1.HORA_DE_INGRESO_IPS = null;
					
							row1.FECHA_DE__ATENCION_MEDICA = null;
					
							row1.HORA_DE_ATENCION_MEDICA = null;
					
							row1.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = null;
					
							row1.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = null;
					
							row1.REQUERIMIENTO_DE_CX = null;
					
							row1.REFERIDO_A_OTRA_IPS = null;
					
							row1.REGION_ANATOMICA_MAS_AFECTADA = null;
					
							row1.POLITRAUMATISMO = null;
					
							row1.TIPO_AFILIACION = null;
					
							row1.EPS_USUARIO = null;
					
							row1.CONDICION_EGRESO = null;
					
							row1.OPORTUNIDAD_CITAS_DE_CONTROL = null;
					
							row1.COSTOS = null;
					
							row1.MES = null;
					
							row1.IPS = null;
					
							row1.GRUPO_ETAREO = null;
					
							row1.CURSO_DE_VIDA = null;
					
							row1.ANO = null;
					
							row1.DIA_SEMANA = null;
					
							row1.Codigo_Administradora = null;
					
							row1.Administradora = null;
					
							row1.Tipo_Administradora = null;
					
							row1.Coigo_RIPS = null;
					
							row1.Descripcion_RIPS = null;
					
				}else{
					
	                int columnIndexWithD_tFileInputDelimited_1 = 0; //Column Index 
	                
						columnIndexWithD_tFileInputDelimited_1 = 0;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.Numero = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"Numero", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.Numero = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.Numero = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 1;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.EDAD = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.EDAD = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 2;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.SEXO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.SEXO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 3;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TIPO_DE_VEHICULO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TIPO_DE_VEHICULO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 4;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.RELACION_USUARIO_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.RELACION_USUARIO_ACCIDENTE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 5;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_DE_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_DE_ACCIDENTE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 6;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_DE_INGRESO_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_DE_INGRESO_IPS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 7;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HORA_DE_ACCIDENTE = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HORA_DE_ACCIDENTE = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 8;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HORA_DE_INGRESO_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HORA_DE_INGRESO_IPS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 9;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.FECHA_DE__ATENCION_MEDICA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.FECHA_DE__ATENCION_MEDICA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 10;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.HORA_DE_ATENCION_MEDICA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.HORA_DE_ATENCION_MEDICA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 11;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 12;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 13;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.REQUERIMIENTO_DE_CX = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.REQUERIMIENTO_DE_CX = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 14;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.REFERIDO_A_OTRA_IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.REFERIDO_A_OTRA_IPS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 15;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.REGION_ANATOMICA_MAS_AFECTADA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.REGION_ANATOMICA_MAS_AFECTADA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 16;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.POLITRAUMATISMO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.POLITRAUMATISMO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 17;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.TIPO_AFILIACION = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.TIPO_AFILIACION = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 18;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.EPS_USUARIO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.EPS_USUARIO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 19;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CONDICION_EGRESO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CONDICION_EGRESO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 20;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.OPORTUNIDAD_CITAS_DE_CONTROL = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.OPORTUNIDAD_CITAS_DE_CONTROL = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 21;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.COSTOS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.COSTOS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 22;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.MES = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.MES = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 23;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.IPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.IPS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 24;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.GRUPO_ETAREO = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.GRUPO_ETAREO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 25;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.CURSO_DE_VIDA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.CURSO_DE_VIDA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 26;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
								
									if(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1].length() > 0) {
										try {
									
										row1.ANO = ParserUtils.parseTo_Integer(rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1]);
									
									
										} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
											rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
												"ANO", "row1", rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1], ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
										}
    								}else{
    									
											
												row1.ANO = null;
											
    									
    								}
									
									
							
						
						}else{
						
							
								row1.ANO = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 27;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.DIA_SEMANA = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.DIA_SEMANA = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 28;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Codigo_Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Codigo_Administradora = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 29;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Administradora = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 30;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Tipo_Administradora = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Tipo_Administradora = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 31;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Coigo_RIPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Coigo_RIPS = null;
							
						
						}
						
						
					
						columnIndexWithD_tFileInputDelimited_1 = 32;
						
						
						
						if(columnIndexWithD_tFileInputDelimited_1 < rowtFileInputDelimited_1.length){
						
						
							
									row1.Descripcion_RIPS = rowtFileInputDelimited_1[columnIndexWithD_tFileInputDelimited_1];
									
							
						
						}else{
						
							
								row1.Descripcion_RIPS = null;
							
						
						}
						
						
					
				}
				
									
									if(rowstate_tFileInputDelimited_1.getException()!=null) {
										throw rowstate_tFileInputDelimited_1.getException();
									}
									
									
	    						} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							        whetherReject_tFileInputDelimited_1 = true;
        							
                							System.err.println(e.getMessage());
                							row1 = null;
                						
            							globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE", e.getMessage());
            							
	    						}
	
							

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

salidaDatosCorrectos = null;

boolean rejected_tMap_1 = true;
// ###### START REJECTS ##### 

// # Output reject table : 'salidaDatosCorrectos'
// # Filter conditions 
if( rejected_tMap_1 && (

private int numericos(String edad) {
	
	return Integer.parseInt(edad);

}

) ) {
salidaDatosCorrectos_tmp.Numero = row1.Numero ;
salidaDatosCorrectos_tmp.EDAD = numericos(row1.EDAD) ;
salidaDatosCorrectos_tmp.SEXO = row1.SEXO ;
salidaDatosCorrectos_tmp.TIPO_DE_VEHICULO = row1.TIPO_DE_VEHICULO ;
salidaDatosCorrectos_tmp.RELACION_USUARIO_ACCIDENTE = row1.RELACION_USUARIO_ACCIDENTE ;
salidaDatosCorrectos_tmp.FECHA_DE_ACCIDENTE = row1.FECHA_DE_ACCIDENTE ;
salidaDatosCorrectos_tmp.FECHA_DE_INGRESO_IPS = row1.FECHA_DE_INGRESO_IPS ;
salidaDatosCorrectos_tmp.HORA_DE_ACCIDENTE = row1.HORA_DE_ACCIDENTE ;
salidaDatosCorrectos_tmp.HORA_DE_INGRESO_IPS = row1.HORA_DE_INGRESO_IPS ;
salidaDatosCorrectos_tmp.FECHA_DE__ATENCION_MEDICA = row1.FECHA_DE__ATENCION_MEDICA ;
salidaDatosCorrectos_tmp.HORA_DE_ATENCION_MEDICA = row1.HORA_DE_ATENCION_MEDICA ;
salidaDatosCorrectos_tmp.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS = row1.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS ;
salidaDatosCorrectos_tmp.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS = row1.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS ;
salidaDatosCorrectos_tmp.REQUERIMIENTO_DE_CX = row1.REQUERIMIENTO_DE_CX ;
salidaDatosCorrectos_tmp.REFERIDO_A_OTRA_IPS = row1.REFERIDO_A_OTRA_IPS ;
salidaDatosCorrectos_tmp.REGION_ANATOMICA_MAS_AFECTADA = row1.REGION_ANATOMICA_MAS_AFECTADA ;
salidaDatosCorrectos_tmp.POLITRAUMATISMO = row1.POLITRAUMATISMO ;
salidaDatosCorrectos_tmp.TIPO_AFILIACION = row1.TIPO_AFILIACION ;
salidaDatosCorrectos_tmp.EPS_USUARIO = row1.EPS_USUARIO ;
salidaDatosCorrectos_tmp.CONDICION_EGRESO = row1.CONDICION_EGRESO ;
salidaDatosCorrectos_tmp.OPORTUNIDAD_CITAS_DE_CONTROL = row1.OPORTUNIDAD_CITAS_DE_CONTROL ;
salidaDatosCorrectos_tmp.COSTOS = row1.COSTOS ;
salidaDatosCorrectos_tmp.MES = row1.MES ;
salidaDatosCorrectos_tmp.IPS = row1.IPS ;
salidaDatosCorrectos_tmp.GRUPO_ETAREO = row1.GRUPO_ETAREO ;
salidaDatosCorrectos_tmp.CURSO_DE_VIDA = row1.CURSO_DE_VIDA ;
salidaDatosCorrectos_tmp.ANO = row1.ANO ;
salidaDatosCorrectos_tmp.DIA_SEMANA = row1.DIA_SEMANA ;
salidaDatosCorrectos_tmp.Codigo_Administradora = row1.Codigo_Administradora ;
salidaDatosCorrectos_tmp.Administradora = row1.Administradora ;
salidaDatosCorrectos_tmp.Tipo_Administradora = row1.Tipo_Administradora ;
salidaDatosCorrectos_tmp.Coigo_RIPS = row1.Coigo_RIPS ;
salidaDatosCorrectos_tmp.Descripcion_RIPS = row1.Descripcion_RIPS ;
salidaDatosCorrectos = salidaDatosCorrectos_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "salidaDatosCorrectos"
if(salidaDatosCorrectos != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"salidaDatosCorrectos"
						
						);
					}
					
///////////////////////		
						

				
				String[] row_tLogRow_1 = new String[33];
   				
	    		if(salidaDatosCorrectos.Numero != null) { //              
                 row_tLogRow_1[0]=    						    
				                String.valueOf(salidaDatosCorrectos.Numero)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.EDAD != null) { //              
                 row_tLogRow_1[1]=    						    
				                String.valueOf(salidaDatosCorrectos.EDAD)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.SEXO != null) { //              
                 row_tLogRow_1[2]=    						    
				                String.valueOf(salidaDatosCorrectos.SEXO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.TIPO_DE_VEHICULO != null) { //              
                 row_tLogRow_1[3]=    						    
				                String.valueOf(salidaDatosCorrectos.TIPO_DE_VEHICULO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.RELACION_USUARIO_ACCIDENTE != null) { //              
                 row_tLogRow_1[4]=    						    
				                String.valueOf(salidaDatosCorrectos.RELACION_USUARIO_ACCIDENTE)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.FECHA_DE_ACCIDENTE != null) { //              
                 row_tLogRow_1[5]=    						    
				                String.valueOf(salidaDatosCorrectos.FECHA_DE_ACCIDENTE)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.FECHA_DE_INGRESO_IPS != null) { //              
                 row_tLogRow_1[6]=    						    
				                String.valueOf(salidaDatosCorrectos.FECHA_DE_INGRESO_IPS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.HORA_DE_ACCIDENTE != null) { //              
                 row_tLogRow_1[7]=    						    
				                String.valueOf(salidaDatosCorrectos.HORA_DE_ACCIDENTE)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.HORA_DE_INGRESO_IPS != null) { //              
                 row_tLogRow_1[8]=    						    
				                String.valueOf(salidaDatosCorrectos.HORA_DE_INGRESO_IPS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.FECHA_DE__ATENCION_MEDICA != null) { //              
                 row_tLogRow_1[9]=    						    
				                String.valueOf(salidaDatosCorrectos.FECHA_DE__ATENCION_MEDICA)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.HORA_DE_ATENCION_MEDICA != null) { //              
                 row_tLogRow_1[10]=    						    
				                String.valueOf(salidaDatosCorrectos.HORA_DE_ATENCION_MEDICA)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS != null) { //              
                 row_tLogRow_1[11]=    						    
				                String.valueOf(salidaDatosCorrectos.OPORTUNIDAD_DE_LA_ATENCION_EN_HORAS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS != null) { //              
                 row_tLogRow_1[12]=    						    
				                String.valueOf(salidaDatosCorrectos.OPORTUNIDAD_DE_LA_ATENCION_EN_MINUTOS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.REQUERIMIENTO_DE_CX != null) { //              
                 row_tLogRow_1[13]=    						    
				                String.valueOf(salidaDatosCorrectos.REQUERIMIENTO_DE_CX)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.REFERIDO_A_OTRA_IPS != null) { //              
                 row_tLogRow_1[14]=    						    
				                String.valueOf(salidaDatosCorrectos.REFERIDO_A_OTRA_IPS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.REGION_ANATOMICA_MAS_AFECTADA != null) { //              
                 row_tLogRow_1[15]=    						    
				                String.valueOf(salidaDatosCorrectos.REGION_ANATOMICA_MAS_AFECTADA)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.POLITRAUMATISMO != null) { //              
                 row_tLogRow_1[16]=    						    
				                String.valueOf(salidaDatosCorrectos.POLITRAUMATISMO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.TIPO_AFILIACION != null) { //              
                 row_tLogRow_1[17]=    						    
				                String.valueOf(salidaDatosCorrectos.TIPO_AFILIACION)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.EPS_USUARIO != null) { //              
                 row_tLogRow_1[18]=    						    
				                String.valueOf(salidaDatosCorrectos.EPS_USUARIO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.CONDICION_EGRESO != null) { //              
                 row_tLogRow_1[19]=    						    
				                String.valueOf(salidaDatosCorrectos.CONDICION_EGRESO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.OPORTUNIDAD_CITAS_DE_CONTROL != null) { //              
                 row_tLogRow_1[20]=    						    
				                String.valueOf(salidaDatosCorrectos.OPORTUNIDAD_CITAS_DE_CONTROL)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.COSTOS != null) { //              
                 row_tLogRow_1[21]=    						    
				                String.valueOf(salidaDatosCorrectos.COSTOS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.MES != null) { //              
                 row_tLogRow_1[22]=    						    
				                String.valueOf(salidaDatosCorrectos.MES)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.IPS != null) { //              
                 row_tLogRow_1[23]=    						    
				                String.valueOf(salidaDatosCorrectos.IPS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.GRUPO_ETAREO != null) { //              
                 row_tLogRow_1[24]=    						    
				                String.valueOf(salidaDatosCorrectos.GRUPO_ETAREO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.CURSO_DE_VIDA != null) { //              
                 row_tLogRow_1[25]=    						    
				                String.valueOf(salidaDatosCorrectos.CURSO_DE_VIDA)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.ANO != null) { //              
                 row_tLogRow_1[26]=    						    
				                String.valueOf(salidaDatosCorrectos.ANO)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.DIA_SEMANA != null) { //              
                 row_tLogRow_1[27]=    						    
				                String.valueOf(salidaDatosCorrectos.DIA_SEMANA)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.Codigo_Administradora != null) { //              
                 row_tLogRow_1[28]=    						    
				                String.valueOf(salidaDatosCorrectos.Codigo_Administradora)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.Administradora != null) { //              
                 row_tLogRow_1[29]=    						    
				                String.valueOf(salidaDatosCorrectos.Administradora)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.Tipo_Administradora != null) { //              
                 row_tLogRow_1[30]=    						    
				                String.valueOf(salidaDatosCorrectos.Tipo_Administradora)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.Coigo_RIPS != null) { //              
                 row_tLogRow_1[31]=    						    
				                String.valueOf(salidaDatosCorrectos.Coigo_RIPS)			
					          ;	
							
	    		} //			
    			   				
	    		if(salidaDatosCorrectos.Descripcion_RIPS != null) { //              
                 row_tLogRow_1[32]=    						    
				                String.valueOf(salidaDatosCorrectos.Descripcion_RIPS)			
					          ;	
							
	    		} //			
    			 

				util_tLogRow_1.addRow(row_tLogRow_1);	
				nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "salidaDatosCorrectos"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	


				nb_line_tFileInputDelimited_1++;
			}
			
			}finally{
    			if(!(filename_tFileInputDelimited_1 instanceof java.io.InputStream)){
    				if(csvReadertFileInputDelimited_1!=null){
    					csvReadertFileInputDelimited_1.close();
    				}
    			}
    			if(csvReadertFileInputDelimited_1!=null){
    				globalMap.put("tFileInputDelimited_1_NB_LINE",nb_line_tFileInputDelimited_1);
    			}
				
			}
						  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////

                    
                    java.io.PrintStream consoleOut_tLogRow_1 = null;
                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    
                    consoleOut_tLogRow_1.println(util_tLogRow_1.format().toString());
                    consoleOut_tLogRow_1.flush();
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"salidaDatosCorrectos");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	protected PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Dim_Lugar Dim_LugarClass = new Dim_Lugar();

		int exitCode = Dim_LugarClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}
		boolean inOSGi = routines.system.BundleUtils.inOSGi();

		if (inOSGi) {
			java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

			if (jobProperties != null && jobProperties.get("context") != null) {
				contextStr = (String) jobProperties.get("context");
			}
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Dim_Lugar.class.getClassLoader()
					.getResourceAsStream("costoshospitalaria/dim_lugar_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Dim_Lugar.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				try {
					// defaultProps is in order to keep the original context value
					if (context != null && context.isEmpty()) {
						defaultProps.load(inContext);
						context = new ContextProperties(defaultProps);
					}
				} finally {
					inContext.close();
				}
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tFileInputDelimited_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tFileInputDelimited_1) {
			globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

			e_tFileInputDelimited_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Dim_Lugar");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;

		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 127811 characters generated by Talend Open Studio for Data Integration on the
 * 20 de junio de 2022, 14:28:55 COT
 ************************************************************************************************/